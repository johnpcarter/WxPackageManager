<?xml version="1.0" encoding="UTF-8"?>

<Values version="2.0">
  <value name="shared">CnByaXZhdGUgc3RhdGljIFN0cmluZyBfdGFza0lkID0gbnVsbDsKCnByaXZhdGUgc3RhdGljIFN0
cmluZyBfZGVmYXVsdFJlZ2lzdHJ5ID0gInB1YmxpYyI7Cgpwcml2YXRlIHN0YXRpYyBIYXNoTWFw
PFN0cmluZywgSW50ZWdlcj4gX3BhY2thZ2VDb3VudGVyID0gbmV3IEhhc2hNYXA8U3RyaW5nLCBJ
bnRlZ2VyPigpOwoKcHVibGljIHN0YXRpYyBJRGF0YSBtYWtlVmFsdWUoRGF0ZSBkYXRlLCBpbnQg
dikgewoKCXJldHVybiBtYWtlVmFsdWUoZm9ybWF0RGF0ZShkYXRlKSwgdik7Cn0KCnB1YmxpYyBz
dGF0aWMgSURhdGEgbWFrZVZhbHVlKFN0cmluZyBsYWJlbCwgaW50IHYpIHsKCQoJSURhdGEgdmFs
dWUgPSBJRGF0YUZhY3RvcnkuY3JlYXRlKCk7CgkKCUlEYXRhQ3Vyc29yIHBhZGRlZFJlc3VsdHND
dXJzb3IgPSB2YWx1ZS5nZXRDdXJzb3IoKTsKCUlEYXRhVXRpbC5wdXQocGFkZGVkUmVzdWx0c0N1
cnNvciwgImxhYmVsIiwgbGFiZWwpOwoJSURhdGFVdGlsLnB1dChwYWRkZWRSZXN1bHRzQ3Vyc29y
LCAidmFsdWUiLCB2KTsKCXBhZGRlZFJlc3VsdHNDdXJzb3IuZGVzdHJveSgpOwoJCglyZXR1cm4g
dmFsdWU7Cn0KCgpwdWJsaWMgc3RhdGljIExvY2FsRGF0ZSBjb252ZXJ0RGF0ZVRvTG9jYWxEYXRl
KERhdGUgZGF0ZSkgewoKCXJldHVybiBJbnN0YW50Lm9mRXBvY2hNaWxsaShkYXRlLmdldFRpbWUo
KSkKICAgICAgLmF0Wm9uZShab25lSWQuc3lzdGVtRGVmYXVsdCgpKQogICAgICAudG9Mb2NhbERh
dGUoKTsKfQoKcHVibGljIHN0YXRpYyBmaW5hbCBTdHJpbmcgVElNRVNUQU1QX1BBVFRFUk4gPSAi
ZGQtTU1NIjsKcHVibGljIHN0YXRpYyBmaW5hbCBEYXRlVGltZUZvcm1hdHRlciBGT01BVFRFUiA9
IERhdGVUaW1lRm9ybWF0dGVyLm9mUGF0dGVybihUSU1FU1RBTVBfUEFUVEVSTik7CgpwdWJsaWMg
c3RhdGljIFN0cmluZyBmb3JtYXREYXRlKERhdGUgZGF0ZSkgewoJCglyZXR1cm4gRk9NQVRURVIu
Zm9ybWF0KGNvbnZlcnREYXRlVG9Mb2NhbERhdGUoZGF0ZSkpOwp9CgpwdWJsaWMgc3RhdGljIFN0
cmluZ1tdIHNwbGl0VXJpKFN0cmluZyB1cmxTdHJpbmcpIHsKCgkvLyBodHRwczovL2dpdGh1Yi5j
b20vU29mdHdhcmVBRy93bS1pcy1jbGllbnQuZ2l0CQkKICAgIFVSTCB1cmw7Cgl0cnkgewoJCXVy
bCA9IG5ldyBVUkwodXJsU3RyaW5nKTsKCX0gY2F0Y2ggKE1hbGZvcm1lZFVSTEV4Y2VwdGlvbiBl
KSB7CiAgICAJdGhyb3cgbmV3IFJ1bnRpbWVFeGNlcHRpb24oU3RyaW5nLmZvcm1hdCgiJXMgaXMg
bm90IGEgdmFsaWQgVVJMLiIsdXJsU3RyaW5nKSk7Cgl9CQogICAgCiAgICBTdHJpbmcgcGF0aCA9
IHVybC5nZXRQYXRoKCk7IAogICAgCiAgICBTdHJpbmdbXSBzcGxpdCA9IHBhdGgucmVwbGFjZUZp
cnN0KCIvIiwgIiIpLnNwbGl0KCIvIik7CiAgICBTdHJpbmcgbWFsZm9ybWVkR2l0aHViVXJsTWVz
c2FnZSA9IFN0cmluZy5mb3JtYXQoIlwiJXNcIiBpcyBub3QgYSB2YWxpZCBHaXRIdWIgcmVwb3Np
dG9yeSBVUkwuIEEgdmFsaWQgR2l0SHViIFVSTCBpcyBpbiB0aGUgZm9ybWF0IGh0dHBzOi8vPGhv
c3RuYW1lPi88b3duZXI+LzxyZXBvc2l0b3J5Pi5naXQiLCB1cmwpOwogICAgaWYgKHNwbGl0Lmxl
bmd0aCAhPSAyKSB7CiAgICAJdGhyb3cgbmV3IFJ1bnRpbWVFeGNlcHRpb24obWFsZm9ybWVkR2l0
aHViVXJsTWVzc2FnZSk7CiAgICB9CiAgICAKICAgIGlmICghKHNwbGl0WzFdLmVuZHNXaXRoKCIu
Z2l0IikpKSB7CiAgICAJdGhyb3cgbmV3IFJ1bnRpbWVFeGNlcHRpb24obWFsZm9ybWVkR2l0aHVi
VXJsTWVzc2FnZSk7CiAgICB9CiAgICAKCVN0cmluZyByZXBvID0gc3BsaXRbMV0ucmVwbGFjZSgi
LmdpdCIsICIiKTsKCVN0cmluZyBvd25lciA9IHNwbGl0WzBdOwoJCQkJCglpZiAob3duZXIuaW5k
ZXhPZigiOiIpICE9IC0xKSB7CgkJb3duZXIgPSBvd25lci5zdWJzdHJpbmcob3duZXIuaW5kZXhP
ZigiOiIpKzEpOwoJfQoJCglTdHJpbmdbXSBvdXQgPSBuZXcgU3RyaW5nWzJdOwoJb3V0WzBdID0g
b3duZXI7CglvdXRbMV0gPSByZXBvOwoJCglyZXR1cm4gb3V0Owp9Cgpwcml2YXRlIHN0YXRpYyBT
dHJpbmcgZ3JhYlVzZXIoSURhdGEgY3VycmVudFVzZXIpIHsKCQoJSURhdGFDdXJzb3IgY3VycmVu
dFVzZXJzQ3Vyc29yID0gY3VycmVudFVzZXIuZ2V0Q3Vyc29yKCk7CglTdHJpbmcgdXNlciA9IElE
YXRhVXRpbC5nZXRTdHJpbmcoY3VycmVudFVzZXJzQ3Vyc29yLCAiVVNFUiIpOwoJY3VycmVudFVz
ZXJzQ3Vyc29yLmRlc3Ryb3koKTsKCQoJcmV0dXJuIHVzZXI7Cn0KCgpwcml2YXRlIHN0YXRpYyBT
dHJpbmcgZmluZFBhdGgoU3RyaW5nIGJhc2VQYXRoLCBTdHJpbmcgZmlsZSkgewogICAgCglGaWxl
W10gZmlsZXMgPSBuZXcgRmlsZShiYXNlUGF0aCkubGlzdEZpbGVzKCk7CglTdHJpbmcgZm91bmRQ
YXRoOwoKCWZvciAoaW50IGkgPSAwOyBpIDwgZmlsZXMubGVuZ3RoOyBpKyspIHsKCQkJCQkKCQlp
ZiAoZmlsZS5lcXVhbHMoZmlsZXNbaV0uZ2V0TmFtZSgpKSkgewoJCQlyZXR1cm4gZmlsZXNbaV0u
Z2V0QWJzb2x1dGVQYXRoKCk7CgkJfSBlbHNlIGlmIChmaWxlc1tpXS5pc0RpcmVjdG9yeSgpKSB7
CgkJCWZvdW5kUGF0aCA9IGZpbmRQYXRoKGZpbGVzW2ldLmdldEFic29sdXRlUGF0aCgpLCBmaWxl
KTsKCQkJCgkJCWlmIChmb3VuZFBhdGggIT0gbnVsbCkgewoJCQkJcmV0dXJuIGZvdW5kUGF0aDsK
CQkJfQoJCX0KCX0KCQoJcmV0dXJuIG51bGw7Cn0KCnByaXZhdGUgc3RhdGljIHZvaWQgZGVsZXRl
RmlsZXMoRmlsZSBkaXJQYXRoKSB7CiAgICAgIEZpbGUgZmlsZXNMaXN0W10gPSBkaXJQYXRoLmxp
c3RGaWxlcygpOwogICAgICBmb3IoRmlsZSBmaWxlIDogZmlsZXNMaXN0KSB7CiAgICAgICAgIGlm
KGZpbGUuaXNEaXJlY3RvcnkoKSkgewogICAgICAgIAkgZGVsZXRlRmlsZXMoZmlsZSk7IAogICAg
ICAgICB9CiAgICAgICAgIAogICAgICAgICBmaWxlLmRlbGV0ZSgpOwogICAgICB9CiAgIH0KCQoJ
CgkKCQoJCgkKCQoJCgkKCQ==</value>
  <value name="encodeutf8">true</value>
  <array name="imports" type="value" depth="1">
    <value>com.wm.app.b2b.server.InvokeState</value>
    <value>com.wm.app.b2b.server.ServiceThread</value>
    <value>java.io.File</value>
    <value>java.io.IOException</value>
    <value>java.io.PrintWriter</value>
    <value>java.io.StringWriter</value>
    <value>java.net.MalformedURLException</value>
    <value>java.net.URL</value>
    <value>java.nio.file.CopyOption</value>
    <value>java.nio.file.Files</value>
    <value>java.nio.file.Path</value>
    <value>java.nio.file.StandardCopyOption</value>
    <value>java.time.Instant</value>
    <value>java.time.LocalDate</value>
    <value>java.time.Period</value>
    <value>java.time.ZoneId</value>
    <value>java.time.format.DateTimeFormatter</value>
    <value>java.time.temporal.ChronoUnit</value>
    <value>java.util.ArrayList</value>
    <value>java.util.Base64</value>
    <value>java.util.Date</value>
    <value>java.util.Formatter</value>
    <value>java.util.HashMap</value>
    <value>com.softwareag.is.dynamicvariables.DynamicVariablesEncryptor</value>
    <value>com.softwareag.util.IDataMap</value>
    <value>com.wm.util.JournalLogger</value>
  </array>
  <value name="extends"></value>
  <array name="implements" type="value" depth="1">
  </array>
</Values>
