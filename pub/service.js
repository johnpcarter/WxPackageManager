app.service('myserv', function() {
          this.getServiceList = function () {
    return [{"serviceName":"wx.packages.manager.access_.services:authenticate","description":"Authenticates access using credentials and return a 60 minute token that should be used for al successive API access\nvia header accessToken.","serviceinputs":[{"inputName":"username","inputType":"String","inputComments":"no comment","required":true,"wrapperType":"--"},{"inputName":"password","inputType":"String","inputComments":"no comment","required":true,"wrapperType":"--"}],"serviceoutputs":[{"outputName":"accessToken","outputType":"String","outputComments":"short term access token to be used for all succesive API access","required":true,"wrapperType":"--"},{"outputName":"userType","outputType":"String","outputComments":"no comment","required":true,"wrapperType":"--"}]},{"serviceName":"wx.packages.manager.access_.services:createToken","description":"Exchanges short term token generated via authenticate service for a long term token that can be then used in CI/CD scripts for automation.\nLabel is required for tracking purposes, see listTokens service. User can specify an optiona numDays after which the token is revoked automatically.\nUser can then revoke tokens via the revokeToken service for tokens that never expire or expire a token before numDays has been reached.\n\nThe service also allows an admin user to request tokens on behalf of other users via the optional for attribute.","serviceinputs":[{"inputName":"numDays","inputType":"String","inputComments":"Optional number of days after which returned token will be revoked automatically","required":false,"wrapperType":"--"},{"inputName":"label","inputType":"String","inputComments":"label to easily identify token when listing/revoking later","required":true,"wrapperType":"--"},{"inputName":"for","inputType":"String","inputComments":"(optional) Allows client to request an access token behalf of this user. However, this is only allowed if this call is made by admin user","required":false,"wrapperType":"--"}],"serviceoutputs":[{"outputName":"accessToken","outputType":"String","outputComments":"long term token than can now be used for CI/CD scripts etc","required":false,"wrapperType":"--"}]},{"serviceName":"wx.packages.manager.access_.services:getSessionID","description":"Returns the user information associated with the given credentials, be it a JWT token or basic authentication.\nReturns a 401 error if the token is invalid or has been revoked by the administrator.","serviceinputs":[],"serviceoutputs":[{"outputName":"userID","outputType":"String","outputComments":"no comment","required":true,"wrapperType":"--"},{"outputName":"internalUserID","outputType":"String","outputComments":"no comment","required":true,"wrapperType":"--"},{"outputName":"isAdministrator","outputType":"Object","outputComments":"no comment","required":true,"wrapperType":"java.lang.Boolean"}]},{"serviceName":"wx.packages.manager.access_.services:listTokens","description":"Lists all available long term tokens that were created by the current user.","serviceinputs":[],"serviceoutputs":[{"outputName":"tokens","outputType":"Document List","outputComments":"List of tokens that were created by given user,  not token itself is never recorded","required":true,"wrapperType":"--"}]},{"serviceName":"wx.packages.manager.access_.services:revokeToken","description":"Revokes the token identified by the label. If the given token is used after it will be refused regardless of the whether token is valid or not.","serviceinputs":[{"inputName":"label","inputType":"String","inputComments":"label of token to revoke","required":true,"wrapperType":"--"}],"serviceoutputs":[{"outputName":"success","outputType":"Object","outputComments":"no comment","required":false,"wrapperType":"java.lang.Boolean"}]},{"serviceName":"wx.packages.manager.credentials_.services:getSourceCredentials","description":"## List git tokens\n \nRetrieves all of the git credentials that you have registered for different git servers. This API requires that you are logged in and will only show credentials associated with your login\n\nNOTE: You should not use your git login/password as it will not work. Instead generate a developer access token via the settings menu when logged into github.\n\n## Input \nNone\n\n## Output\nList of git credentials associated with your user id.","serviceinputs":[],"serviceoutputs":[{"outputName":"credentials(wx.packages.manager.credentials_.docTypes:Credentials)","outputType":"Document Reference List","outputComments":"no comment","required":true,"wrapperType":"--"}]},{"serviceName":"wx.packages.manager.credentials_.services:registerSourceCredentials","description":"## Register GIT credentials\n\nEncrypts and then persists the git token for later user. This token will only be used in relation to your login and will only be used to query private git repositories to allow you download the package source code.\n\nNOTE: You should not use your git login/password as it will not work. Instead generate a developer access token via the settings menu when logged into github.\n\n## INPUT\nsource - git url of server that the credentials are for\nuser - your user id (NOT that of the owner of the repository)\ntoken - Developer access token that you have generated.\n\n## OUTPUT\nnone","serviceinputs":[{"inputName":"source","inputType":"String","inputComments":"no comment","required":true,"wrapperType":"--"},{"inputName":"user","inputType":"String","inputComments":"no comment","required":true,"wrapperType":"--"},{"inputName":"token","inputType":"String","inputComments":"no comment","required":true,"wrapperType":"--"}],"serviceoutputs":[{"outputName":"success","outputType":"Object","outputComments":"no comment","required":false,"wrapperType":"java.lang.Boolean"}]},{"serviceName":"wx.packages.manager.credentials_.services:removeCredentials","description":"## Remove use token\n\nDelete the developer token for the git source and user.\n\nNOTE: this will only delete credentials associated with the current logged in user.\n\n## INPUT\nsource - the source url of the associated git server\nuser - the id associated with the token\n\n## OUTPUT\nsuccess - true if operation was successful","serviceinputs":[{"inputName":"source","inputType":"String","inputComments":"no comment","required":true,"wrapperType":"--"},{"inputName":"user","inputType":"String","inputComments":"no comment","required":true,"wrapperType":"--"}],"serviceoutputs":[{"outputName":"success","outputType":"Object","outputComments":"no comment","required":true,"wrapperType":"java.lang.Boolean"}]},{"serviceName":"wx.packages.manager.notifications_.services:addNotification","description":"## Add Notification\n\nAdd email notification for changes to the given package or registry.\n\n## INPUT\nregistry - registry of package if package or null if name (below) is a registry\nname - the name of the registry or package on which to receive notifications.\nisPackage - true if name is a package or false if name is a registry\nfriendlyName - name to be used in email body\nemail - email address to use for notification\n\n## OUTPUT\nsuccess - true if notification added successfully, false if registry or package don\u0027t exist or if email already registered for given asset","serviceinputs":[{"inputName":"registry","inputType":"String","inputComments":"no comment","required":false,"wrapperType":"--"},{"inputName":"name","inputType":"String","inputComments":"no comment","required":true,"wrapperType":"--"},{"inputName":"isPackage","inputType":"Object","inputComments":"no comment","required":true,"wrapperType":"java.lang.Boolean"},{"inputName":"friendlyName","inputType":"String","inputComments":"no comment","required":false,"wrapperType":"--"},{"inputName":"email","inputType":"String","inputComments":"no comment","required":true,"wrapperType":"--"}],"serviceoutputs":[{"outputName":"success","outputType":"Object","outputComments":"no comment","required":true,"wrapperType":"java.lang.Boolean"}]},{"serviceName":"wx.packages.manager.notifications_.services:getDefaultEmailAddress","description":"## get default email for logged in user\n\nReturns  email address for the given user.\n\n## INPUT\nnone\n\n## OUTPUT\nemail","serviceinputs":[],"serviceoutputs":[{"outputName":"email","outputType":"String","outputComments":"no comment","required":true,"wrapperType":"--"}]},{"serviceName":"wx.packages.manager.notifications_.services:getNotifications","description":"## List available notifications for logged in user\n\nList all of the registry/package email notifications for the current user.\n\n## INPUT\nregistry - (optional) filter notifications for given registry, only applicable for package notifications.\n\n## OUTPUT\nnotifications - list of notifications","serviceinputs":[{"inputName":"registry","inputType":"String","inputComments":"no comment","required":false,"wrapperType":"--"}],"serviceoutputs":[{"outputName":"notifications(wx.packages.manager.notifications_.docTypes:Notification)","outputType":"Document Reference List","outputComments":"no comment","required":true,"wrapperType":"--"}]},{"serviceName":"wx.packages.manager.notifications_.services:removeNotification","description":"## Remove registry/package notification\n\nRemoves the email notification for the given registry or package associated with the current user.\n\n## INPUT\nregistry - (optional) - only required if name is for package that is not in the default registry\nname - name of registry or package\nisPackage - true if name is a package, false if a registry\n\n## OUTPUT\nsuccess - true if notification exists and was removed, false if not","serviceinputs":[{"inputName":"registry","inputType":"String","inputComments":"no comment","required":false,"wrapperType":"--"},{"inputName":"name","inputType":"String","inputComments":"no comment","required":true,"wrapperType":"--"},{"inputName":"isPackage","inputType":"Object","inputComments":"no comment","required":true,"wrapperType":"java.lang.Boolean"}],"serviceoutputs":[{"outputName":"success","outputType":"Object","outputComments":"no comment","required":true,"wrapperType":"java.lang.Boolean"}]},{"serviceName":"wx.packages.manager.notifications_.services:updateDefaultEmail","description":"## Set default email for user\n\nAssociates an email address with the given user.\n\n## INPUT\nemail\n\n## OUTPUT\nsuccess - true if db updated, false if not","serviceinputs":[{"inputName":"email","inputType":"String","inputComments":"no comment","required":false,"wrapperType":"--"}],"serviceoutputs":[{"outputName":"success","outputType":"Object","outputComments":"no comment","required":true,"wrapperType":"java.lang.Boolean"}]},{"serviceName":"wx.packages.manager.packages_.services:download","description":"## Download package\n\nAttempts to download the package from the associated git repository. It will attempt to use you git credentials in the case of a private repositority. However this will require that you are logged in \nand that you have previously persisted your git credentials via the /credentials API.\n\nIf you using a trusted registry then only trusted \u0027tagged\u0027 versions can be downloaded i.e. the code must be signed, valid and match the one as flagged as trusted in the registry.\nThis behaviour can be overridden by the ignoreVerification and ignoreSignatureMatch query params.\n\nThis method can be called anoymously, but will only return packages for public registries\n\n## INPUT\nregistry - registry to query, uses default if not provided.\npackageName - the package to be downloaded.\ntag - (optional) branch tag to download, main branch is used if not given.\nignoreVerification - (optional) default is false, exception  raised if tag is signed but considered not valid.\nignoreSignatureMatch - (optional) default is false, exception raised if the signature of the branch does not match the one on record.\n\n## OUTPUT\nmulti-part content with main part in application/zip format. \n\n## ERRORS\n(1) Non existent package/tag or associated with private repository for which you don\u0027t have permission\n(2) tag is signed but considered invalid and ignoreVerification not set to true\n(3) tag is signed and valid but has been replaced since tag was recorded in the registry, and ignoreSignatureMatch not set to true","serviceinputs":[{"inputName":"registry","inputType":"String","inputComments":"no comment","required":false,"wrapperType":"--"},{"inputName":"packageName","inputType":"String","inputComments":"no comment","required":true,"wrapperType":"--"},{"inputName":"tag","inputType":"String","inputComments":"no comment","required":false,"wrapperType":"--"},{"inputName":"ignoreVerification","inputType":"Object","inputComments":"no comment","required":false,"wrapperType":"java.lang.Boolean"},{"inputName":"ignoreSignatureMatch","inputType":"Object","inputComments":"no comment","required":false,"wrapperType":"java.lang.Boolean"}],"serviceoutputs":[]},{"serviceName":"wx.packages.manager.packages_.services:getAvailableTags","description":"## get download properties for a package\n\nRetrieves the necessary git properties including your access token so that you can download the package source code locally.\n\nNOTE: the sourceToken is a private key that should be used to authenticate if the associated git is private. They key should be written to a local\nsecure file (i.e. readonly to the specific user) and then included in the git command as such where github_rsa is the name of the file.\n\n```\n$ git clone git@github.com:johnpcarter/wm.git --config core.sshCommand\u003d\"ssh -i github_rsa\"\n```\n\nThis method can be called anoymously, but will only return packages for public registries\n\nThe trust attribute can be used to determine if the source code for the package and version is trust worthy or not.\nUNDEFINED is returned where you have not indicated what version to dowload and hence will be based on the main branch.\nACCEPTED indicates that the version is recognised by the package manager but cannot be implicitly trusted as the code could have been modified.\nTRUSTED shows that the version is recognised and that the code has not been modified i.e. we have check the signaure against the signature recorded when originally trusting the the tag.\nTRUSTED_WITH_ISSUES indicates that although the signature matches ours, that git has issues with the signaure, in which case refer to the reason output.\n\nUNDEFINED and ACCEPTED will not available to packages in registries with a TRUST_LEVEL higher than 0 i.e. packages must either be trustworthy or not.\n \nNOTE: The above command will only give read access to the git repository and does not provide any collaboration features.\n\n## INPUT\nregistry - registry to query, uses default if not provided.\npackageName - the package to be downloaded.\ntag - (optional) branch tag to download, main branch is used if not given.\n\n## OUTPUT\nsourceUrl - the url to the git repository\nsourceUserId - your git id (required if the git repo is private)\nsourceToken - the git token that you generated to allow access to private repo\ntrust - One of TRUSTED, NOT_TRUSTED, ACCEPTED, NOT_ACCEPTED, or TRUSTED_WITH_ISSUES or UNDEFINED\nreason - (optional) describes why TRUSTD_WITH_ISSUES was returned.\n\n## ERRORS\n(1) Non existent package/tag or associated with private repository for which you don\u0027t have permission","serviceinputs":[{"inputName":"registry","inputType":"String","inputComments":"no comment","required":false,"wrapperType":"--"},{"inputName":"packageName","inputType":"String","inputComments":"no comment","required":true,"wrapperType":"--"}],"serviceoutputs":[{"outputName":"availableTags","outputType":"Document List","outputComments":"no comment","required":true,"wrapperType":"--"}]},{"serviceName":"wx.packages.manager.packages_.services:getDetails","description":"## Get package details\n\nRetrieves all of the information that we have on the package.\n\nNOTE: the isSigned and isValid outputs are only applicable to trusted registries i.e. a trusted registry requires that someone vets the package and records its code signature\nso that it cannot be altered aftewards.\n\nThis method can be called anoymously, but will only return packages for public registries\n\n## INPUT\nregistry - registry to query, uses default if not provided.\npackageName - the package to be downloaded.\n\n## OUTPUT\nname - name of the package \ndescription - (optional) long description given to package\ncategory - category, should be predefined by registry owner\nowner - The user id of the user who originall registered the package\nownedByMe - true if you are the original registrator\nsearchTags - an array of search keys \nregisteredDate - the date (dd-MM-yyyy) when the package was registered here\ntrustedTags - list of tags that have been trusted for use\navailableTags - list of tags that have not been checked or trusted\nhomePage - the page of the package as provided by git\nwatchers - the number of watchers on the git repository given for the source code\nstargazers - the number of stargazers on the git repository given for the source code\nlastUpdated - the last time a commit was made to the git repository\nprivate - true if the package is associated with a private registry i.e. requires authentication with the registry in order to be visible\nusers - This is a an array list of user ids that are allowed to access the package (this is only applicable for private registries/packags)\nsourceUrl - the git repository url for cloning the package.\nsourceIsPrivate - true if the registry is a private registry, i.e. requires authentication to access\nsourceUserId - a git user id associated with git repo that can be used for eventual authentication.\ntotalDownloads - number of total downloads since package was registered\nrecentDownloads - The number of downloads today.\n\n## ERRORS\n(1) Non existent package/tag or associated with private repository for which you don\u0027t have permission","serviceinputs":[{"inputName":"registry","inputType":"String","inputComments":"no comment","required":false,"wrapperType":"--"},{"inputName":"packageName","inputType":"String","inputComments":"no comment","required":true,"wrapperType":"--"},{"inputName":"includeManifestInfo","inputType":"String","inputComments":"no comment","required":false,"wrapperType":"--"}],"serviceoutputs":[{"outputName":"packageName","outputType":"String","outputComments":"no comment","required":true,"wrapperType":"--"},{"outputName":"registryName","outputType":"String","outputComments":"no comment","required":true,"wrapperType":"--"},{"outputName":"description","outputType":"String","outputComments":"no comment","required":true,"wrapperType":"--"},{"outputName":"homePage","outputType":"String","outputComments":"no comment","required":false,"wrapperType":"--"},{"outputName":"category","outputType":"String","outputComments":"no comment","required":true,"wrapperType":"--"},{"outputName":"assetType","outputType":"String","outputComments":"no comment","required":false,"wrapperType":"--"},{"outputName":"owner","outputType":"String","outputComments":"no comment","required":true,"wrapperType":"--"},{"outputName":"ownedByMe","outputType":"Object","outputComments":"no comment","required":true,"wrapperType":"java.lang.Boolean"},{"outputName":"searchTags","outputType":"String List","outputComments":"no comment","required":true,"wrapperType":"--"},{"outputName":"registeredDate","outputType":"String","outputComments":"no comment","required":true,"wrapperType":"--"},{"outputName":"trustedTags","outputType":"Document List","outputComments":"no comment","required":true,"wrapperType":"--"},{"outputName":"isVisible","outputType":"Object","outputComments":"no comment","required":true,"wrapperType":"java.lang.Boolean"},{"outputName":"sourceUrl","outputType":"String","outputComments":"no comment","required":false,"wrapperType":"--"},{"outputName":"sourcePath","outputType":"String","outputComments":"no comment","required":false,"wrapperType":"--"},{"outputName":"sourceIsPrivate","outputType":"Object","outputComments":"no comment","required":false,"wrapperType":"java.lang.Boolean"},{"outputName":"sourceHasTokenForEverybody","outputType":"Object","outputComments":"no comment","required":true,"wrapperType":"java.lang.Boolean"},{"outputName":"private","outputType":"Object","outputComments":"no comment","required":true,"wrapperType":"java.lang.Boolean"},{"outputName":"totalDownloads","outputType":"Object","outputComments":"no comment","required":false,"wrapperType":"java.lang.Integer"},{"outputName":"upVotes","outputType":"Object","outputComments":"no comment","required":false,"wrapperType":"java.lang.Integer"},{"outputName":"downVotes","outputType":"Object","outputComments":"no comment","required":false,"wrapperType":"java.lang.Integer"},{"outputName":"diffVotes","outputType":"Object","outputComments":"no comment","required":false,"wrapperType":"java.lang.Integer"},{"outputName":"rating","outputType":"Object","outputComments":"no comment","required":false,"wrapperType":"java.lang.Integer"},{"outputName":"misc1","outputType":"String","outputComments":"no comment","required":true,"wrapperType":"--"},{"outputName":"misc2","outputType":"String","outputComments":"no comment","required":true,"wrapperType":"--"},{"outputName":"recentDownloads","outputType":"String","outputComments":"no comment","required":true,"wrapperType":"--"},{"outputName":"alertEmail","outputType":"String","outputComments":"no comment","required":false,"wrapperType":"--"},{"outputName":"manifest","outputType":"Document","outputComments":"no comment","required":false,"wrapperType":"--"}]},{"serviceName":"wx.packages.manager.packages_.services:getDownloadHistory","description":"## Get package details\n\nReturns the number of downloads for the given package based over time\n\n## INPUT\nregistry - registry to query, uses default if not provided.\npackageName - the package to be queried.\n\n## OUTPUT\nvalues - an array of label/value pairs where label is the interval description (e.g. date or time) and value is an integer of the total downloads","serviceinputs":[{"inputName":"registry","inputType":"String","inputComments":"no comment","required":false,"wrapperType":"--"},{"inputName":"packageName","inputType":"String","inputComments":"no comment","required":true,"wrapperType":"--"}],"serviceoutputs":[{"outputName":"values","outputType":"Document List","outputComments":"no comment","required":true,"wrapperType":"--"}]},{"serviceName":"wx.packages.manager.packages_.services:getDownloadProperties","description":"## get download properties for a package\n\nRetrieves the necessary git properties including your access token so that you can download the package source code locally.\n\nNOTE: the sourceToken is a private key that should be used to authenticate if the associated git is private. They key should be written to a local\nsecure file (i.e. readonly to the specific user) and then included in the git command as such where github_rsa is the name of the file.\n\n```\n$ git clone git@github.com:johnpcarter/wm.git --config core.sshCommand\u003d\"ssh -i github_rsa\"\n```\n\nThis method can be called anoymously, but will only return packages for public registries\n\nNOTE: The above command will only give read access to the git repository and does not provide any collaboration features.\n\n## INPUT\nregistry - registry to query, uses default if not provided.\npackageName - the package to be downloaded.\n\n## OUTPUT\nsourceUrl - the url to the git repository\nsourceUserId - your git id (required if the git repo is private)\nsourceToken - the git token that you generated to allow access to private repo\n\n## ERRORS\n(1) Non existent package/tag or associated with private repository for which you don\u0027t have permission","serviceinputs":[{"inputName":"registry","inputType":"String","inputComments":"no comment","required":false,"wrapperType":"--"},{"inputName":"packageName","inputType":"String","inputComments":"no comment","required":true,"wrapperType":"--"}],"serviceoutputs":[{"outputName":"sourceUrl","outputType":"String","outputComments":"no comment","required":false,"wrapperType":"--"},{"outputName":"sourcePath","outputType":"String","outputComments":"no comment","required":false,"wrapperType":"--"},{"outputName":"sourceAccessKey","outputType":"String","outputComments":"no comment","required":false,"wrapperType":"--"}]},{"serviceName":"wx.packages.manager.packages_.services:getPackageManifest","description":"Fetches the package manifest file from the remote git repository","serviceinputs":[{"inputName":"registry","inputType":"String","inputComments":"no comment","required":false,"wrapperType":"--"},{"inputName":"packageName","inputType":"String","inputComments":"no comment","required":true,"wrapperType":"--"},{"inputName":"tag","inputType":"String","inputComments":"no comment","required":false,"wrapperType":"--"}],"serviceoutputs":[{"outputName":"displayName","outputType":"String","outputComments":"no comment","required":false,"wrapperType":"--"},{"outputName":"isSystemPackage","outputType":"String","outputComments":"no comment","required":false,"wrapperType":"--"},{"outputName":"version","outputType":"String","outputComments":"no comment","required":false,"wrapperType":"--"},{"outputName":"build","outputType":"String","outputComments":"no comment","required":false,"wrapperType":"--"},{"outputName":"description","outputType":"String","outputComments":"no comment","required":false,"wrapperType":"--"},{"outputName":"sourceWmVersion","outputType":"String","outputComments":"no comment","required":false,"wrapperType":"--"},{"outputName":"targetWmVersion","outputType":"String","outputComments":"no comment","required":false,"wrapperType":"--"},{"outputName":"lastUpdated","outputType":"String","outputComments":"no comment","required":false,"wrapperType":"--"},{"outputName":"packageArchiveType","outputType":"String","outputComments":"no comment","required":false,"wrapperType":"--"},{"outputName":"packagePublisher","outputType":"String","outputComments":"no comment","required":false,"wrapperType":"--"},{"outputName":"requires","outputType":"Document List","outputComments":"no comment","required":false,"wrapperType":"--"}]},{"serviceName":"wx.packages.manager.packages_.services:getPackageReadme","description":"Retrieves the README.md file for the given package from the git repository","serviceinputs":[{"inputName":"registry","inputType":"String","inputComments":"no comment","required":false,"wrapperType":"--"},{"inputName":"packageName","inputType":"String","inputComments":"no comment","required":true,"wrapperType":"--"},{"inputName":"tag","inputType":"String","inputComments":"no comment","required":false,"wrapperType":"--"}],"serviceoutputs":[{"outputName":"readme","outputType":"String","outputComments":"no comment","required":true,"wrapperType":"--"}]},{"serviceName":"wx.packages.manager.packages_.services:getTagInfo","description":"## get Tag Info\n\nRetrieves the git information for the given tag version.\n\nThis method can be called anoymously, but will only return packages for public registries\n\n\n## INPUT\nregistry - registry to query, uses default if not provided.\npackageName - the package to be downloaded.\ntag - The tag to be queried\n\n## OUTPUT\n\nmessage - The message associated with the commit for the tag\ncommitter - Details on the person who made the commit\nverification - Flags if the tag has been signed and validated.\n\n## EXCEPTION\nthrown if either package or tag is not recognised\nthrown if associated git repository is private the current user does not have sufficient priviledges","serviceinputs":[{"inputName":"registry","inputType":"String","inputComments":"no comment","required":false,"wrapperType":"--"},{"inputName":"packageName","inputType":"String","inputComments":"no comment","required":true,"wrapperType":"--"},{"inputName":"tag","inputType":"String","inputComments":"no comment","required":true,"wrapperType":"--"}],"serviceoutputs":[{"outputName":"message","outputType":"String","outputComments":"no comment","required":true,"wrapperType":"--"},{"outputName":"committer","outputType":"Document","outputComments":"no comment","required":true,"wrapperType":"--"},{"outputName":"verification","outputType":"Document","outputComments":"no comment","required":true,"wrapperType":"--"},{"outputName":"manifest","outputType":"Document","outputComments":"no comment","required":true,"wrapperType":"--"},{"outputName":"trust","outputType":"String","outputComments":"no comment","required":true,"wrapperType":"--"}]},{"serviceName":"wx.packages.manager.packages_.services:listPackages","description":"## List Packages\nlists all packages for the given registry, category and filter. All inputs are optional, if no registry is given assumes that the default registry should be queried.\nThe list tops out at a maximum of 50 rows, the user should either apply a category or filter if the list is too long. Results our ordered by download count descending.\n\nNOTE: private registries will only list packages to which the user has been granted access, including administrators. The only exception being the special user\n\u0027Administrator\u0027 who can see all packages regardless of access permissions.\n\nThis method can be called anoymously, but will only return packages for public registries\n\n**INPUT**\nregistry - (Optional) name of the registry to query, default registry is used if not given (You can change the default registry via the API if required)\ncategory - (Optional) The category of the packages to list (categories should be prefefined by registry owner).\nfilter - (Optional) can be used to filter against the package name or description to shorten results.\n\n**OUTPUT**\npackages - list of package summary including the name, category, description, registration date, searchTags and totalDownloads.","serviceinputs":[{"inputName":"registry","inputType":"String","inputComments":"no comment","required":false,"wrapperType":"--"},{"inputName":"category","inputType":"String","inputComments":"no comment","required":false,"wrapperType":"--"},{"inputName":"filter","inputType":"String","inputComments":"no comment","required":false,"wrapperType":"--"}],"serviceoutputs":[{"outputName":"packages(wx.packages.manager.packages_.docTypes:Package)","outputType":"Document Reference List","outputComments":"no comment","required":true,"wrapperType":"--"}]},{"serviceName":"wx.packages.manager.packages_.services:move","description":"## movePackage\n\nallows a package to be moved from one registry to another. Will trigger an exception if a package of the same name already exists in the targetted registry\n\n**INPUT**\nregistry - (Optional) name of the registry to query, default registry is used if not given (You can change the default registry via the API if required)\npackageName - (Mandatory) The name of the package to be moved.\ntoRegistry - (Mandatory) the name of the registry to move the package into.\ncopy - (optional) set to true if you want to copy the package to the new registry without removing it from the existing registry.\n\n**OUTPUT**\nsuccess - true if package migrated successfully.","serviceinputs":[{"inputName":"registry","inputType":"String","inputComments":"no comment","required":false,"wrapperType":"--"},{"inputName":"packageName","inputType":"String","inputComments":"no comment","required":true,"wrapperType":"--"},{"inputName":"toRegistry","inputType":"String","inputComments":"no comment","required":true,"wrapperType":"--"},{"inputName":"copy","inputType":"Object","inputComments":"no comment","required":false,"wrapperType":"java.lang.Boolean"}],"serviceoutputs":[]},{"serviceName":"wx.packages.manager.packages_.services:registerPackage","description":"## Register a new package\n\nRegisters a webMethods package and its git repository in the registry. The git credentials need only be provided if the git repository is provided. \nThe credentials will only be associated with the the current user. Other developers will have to register their own credentials if they want to be able to download the package.\n\nThe git repo can either represent a proper package i.e. the git root is the package root folder, or it can be used to host more than one package. In which cases the git repo must \nhave a sub-folder with the same name as the package e.g.\n\n.git\n/MyGreatPackage\n/JcPublicTools\netc.\n\nYou will need to specify the input \u0027sourcePath\u0027 if the packages are not in the git root e.g.\n\n.git\n/packages/MyGreatPackage\n/package/JcPublicTools\n\nin which case the sourcePath would be \u0027packages\u0027.\n\n*NOTE:* You will need administrator level permissions to use this method.\n\n## INPUT\nregistry - (optional) name of the registry to query, default registry is used if not given (You can change the default registry via the API if required)\npackageName - the name of the package\ncategory - category, should be predefined by registry owner\ndescription -(optional) long description for package\nsearchTags - (optional) an array of search keys \ntrustedTag - (optional) a tag that will be trusted for use.\nsignatureTag - (optional) provide the signature for the trusted tag (Used to check that the tag doesn\u0027t get replaced later)\nsourceUrl - the git repository url for cloning the package.\nsourceIsPrivate - (optional) set to true if the git repository is private.\nsourcePath - (optional) specify this if the package is in a sub-directory of the git repo, assumption is that there is a folder with the same name as the package.\nusers - an array of users ids that will be allowed to view/download the package (Only applicable for private registries)\n\n## OUTPUT\nsuccess - true if package was registered","serviceinputs":[{"inputName":"registry","inputType":"String","inputComments":"no comment","required":false,"wrapperType":"--"},{"inputName":"packageName","inputType":"String","inputComments":"no comment","required":true,"wrapperType":"--"},{"inputName":"category","inputType":"String","inputComments":"no comment","required":true,"wrapperType":"--"},{"inputName":"description","inputType":"String","inputComments":"no comment","required":true,"wrapperType":"--"},{"inputName":"searchTags","inputType":"String List","inputComments":"no comment","required":true,"wrapperType":"--"},{"inputName":"homePage","inputType":"String","inputComments":"no comment","required":true,"wrapperType":"--"},{"inputName":"sourceUrl","inputType":"String","inputComments":"no comment","required":true,"wrapperType":"--"},{"inputName":"sourceIsPrivate","inputType":"Object","inputComments":"no comment","required":true,"wrapperType":"java.lang.Boolean"},{"inputName":"sourcePath","inputType":"String","inputComments":"no comment","required":false,"wrapperType":"--"},{"inputName":"trustedTag","inputType":"String","inputComments":"no comment","required":false,"wrapperType":"--"},{"inputName":"signatureTag","inputType":"String","inputComments":"no comment","required":false,"wrapperType":"--"},{"inputName":"users","inputType":"String List","inputComments":"no comment","required":false,"wrapperType":"--"}],"serviceoutputs":[{"outputName":"success","outputType":"Object","outputComments":"no comment","required":true,"wrapperType":"java.lang.Boolean"}]},{"serviceName":"wx.packages.manager.packages_.services:removePackage","description":"## Remove package\n\nRemoves the given package from the given registry.\n\n*NOTE:* You will need administrator level permissions to use this method.\n\n**INPUT**\nregistry - (Optional) name of the registry to query, default registry is used if not given (You can change the default registry via the API if required)\nname - the name of the package\n\n## OUTPUT\nsuccess - true if successful","serviceinputs":[{"inputName":"registry","inputType":"String","inputComments":"no comment","required":false,"wrapperType":"--"},{"inputName":"packageName","inputType":"String","inputComments":"no comment","required":true,"wrapperType":"--"}],"serviceoutputs":[{"outputName":"success","outputType":"Object","outputComments":"no comment","required":true,"wrapperType":"java.lang.Boolean"}]},{"serviceName":"wx.packages.manager.packages_.services:removeUser","description":"## Update users\n\nPrivate registries require that all users authenticate in order to be able to browse the packages. In addition Administrators can choose to show packages only to certain users\nby using this method.\n\nA package can be made visible to all users by setting the list to [\u0027everybody\u0027] and should reference at least one user if it is to not be invisible. The only exception to this is the \n\u0027Administrator\u0027 user which can view all packages regardless permissions. Be aware this applies only to this user and not other admin users.\n\n*NOTE:* You will need administrator level permissions to use this method.\n\n\n**INPUT**\nregistry - (Optional) name of the registry to query, default registry is used if not given (You can change the default registry via the API if required)\npackageName - the name of the package\nusers - a complete array of all user id\u0027s that are allowed to view this package.\n\n## OUTPUT\nsuccess - true if successful","serviceinputs":[{"inputName":"registry","inputType":"String","inputComments":"no comment","required":false,"wrapperType":"--"},{"inputName":"packageName","inputType":"String","inputComments":"no comment","required":true,"wrapperType":"--"},{"inputName":"user","inputType":"String","inputComments":"no comment","required":true,"wrapperType":"--"}],"serviceoutputs":[{"outputName":"success","outputType":"Object","outputComments":"no comment","required":true,"wrapperType":"java.lang.Boolean"}]},{"serviceName":"wx.packages.manager.packages_.services:setVisibility","description":"## setVisibility\n\nflags whether package should be visible to non Administrator users. Only applies to registries that are non public and have a trust level greater than 0.\n\n**INPUT**\nregistry - (Optional) name of the registry to query, default registry is used if not given (You can change the default registry via the API if required)\npackageName - (Mandatory) The name of the package to be updated.\nisVisible - (Mandatory) set to false to hide package from package listing.\n\n**OUTPUT**\nsuccess - true if package migrated successfully.","serviceinputs":[{"inputName":"registry","inputType":"String","inputComments":"no comment","required":false,"wrapperType":"--"},{"inputName":"packageName","inputType":"String","inputComments":"no comment","required":true,"wrapperType":"--"},{"inputName":"isVisible","inputType":"String","inputComments":"no comment","required":true,"wrapperType":"--"}],"serviceoutputs":[{"outputName":"success","outputType":"Object","outputComments":"no comment","required":false,"wrapperType":"java.lang.Boolean"}]},{"serviceName":"wx.packages.manager.packages_.services:syncUserDeployKey","description":"## Sync user deploy with git\n\nThis service generate a public/private key pair and uploads the public key to the git repository to ensure that a private git repositories can be accessed by sharing a ssh rsa public key as a deploy key. \nThe private key is stored locally and provided to any third party client if authenticated agaist the given user. This will ensure that they can pull the code with something like the following\nif they write the key to a local file called github_rsa.\n\n```\n$ git clone git@github.com:johnpcarter/wm.git --config core.sshCommand\u003d\"ssh -i github_rsa\"\n```\n\n*NOTE:* You will need administrator level permissions to use this method. Also the above command will only read access to the git repository and does not provide any collaboration features.\n\n\n**INPUT**\nregistry - (Optional) name of the registry to query, default registry is used if not given (You can change the default registry via the API if required)\npackageName - the name of the package\nuser - the id of the local user to be synced with git\n\n## OUTPUT\nsuccess - true if successful","serviceinputs":[{"inputName":"registry","inputType":"String","inputComments":"no comment","required":false,"wrapperType":"--"},{"inputName":"packageName","inputType":"String","inputComments":"no comment","required":true,"wrapperType":"--"},{"inputName":"user","inputType":"String","inputComments":"no comment","required":true,"wrapperType":"--"}],"serviceoutputs":[{"outputName":"success","outputType":"Object","outputComments":"no comment","required":true,"wrapperType":"java.lang.Boolean"}]},{"serviceName":"wx.packages.manager.packages_.services:trustTag","description":"## Trust tag\n\nFlags that the given tag is to be trusted for use in this registry. The signature ensures that a developer cannot replace the tag after this verification process has completed i.e. \nthe signature is recorded and can compared against the git repository when downloading to check that it hasn\u0027t changed.\n\nDevelopers can still force download packages using the query params ?ignoreVerification\u003dtrue\u0026ignoreSignatureMatch\u003dtrue if required\n\n*NOTE:* You will need administrator level permissions to use this method.\n\n**INPUT**\nregistry - (Optional) name of the registry to query, default registry is used if not given (You can change the default registry via the API if required)\nname - the name of the package\ntag - the tag to be added to the registry.\nsignature - the code signature of the tag\n\n## OUTPUT\nsuccess - true if successful","serviceinputs":[{"inputName":"registry","inputType":"String","inputComments":"no comment","required":false,"wrapperType":"--"},{"inputName":"packageName","inputType":"String","inputComments":"no comment","required":true,"wrapperType":"--"},{"inputName":"tag","inputType":"String","inputComments":"no comment","required":true,"wrapperType":"--"},{"inputName":"signature","inputType":"String","inputComments":"no comment","required":false,"wrapperType":"--"}],"serviceoutputs":[{"outputName":"success","outputType":"Object","outputComments":"no comment","required":true,"wrapperType":"java.lang.Boolean"}]},{"serviceName":"wx.packages.manager.packages_.services:untrustTag","description":"## Untrust tag\n\nRemoves the tag information from the local registry i.e. we will no longer flag it as trusted.\n\n*NOTE:* You will need administrator level permissions to use this method.\n\n**INPUT**\nregistry - (Optional) name of the registry to query, default registry is used if not given (You can change the default registry via the API if required)\nname - the name of the package\ntag - the tag to be removed from the registry.\n\n## OUTPUT\nsuccess - true if successful","serviceinputs":[{"inputName":"registry","inputType":"String","inputComments":"no comment","required":false,"wrapperType":"--"},{"inputName":"packageName","inputType":"String","inputComments":"no comment","required":true,"wrapperType":"--"},{"inputName":"tag","inputType":"String","inputComments":"no comment","required":true,"wrapperType":"--"}],"serviceoutputs":[{"outputName":"success","outputType":"Object","outputComments":"no comment","required":true,"wrapperType":"java.lang.Boolean"}]},{"serviceName":"wx.packages.manager.packages_.services:updateUser","description":"## Update users\n\nPrivate registries require that all users authenticate in order to be able to browse the packages. In addition Administrators can choose to show packages only to certain users\nby using this method.\n\nA package can be made visible to all users by setting the list to [\u0027everybody\u0027] and should reference at least one user if it is to not be invisible. The only exception to this is the \n\u0027Administrator\u0027 user which can view all packages regardless permissions. Be aware this applies only to this user and not other admin users.\n\n*NOTE:* You will need administrator level permissions to use this method.\n\n\n**INPUT**\nregistry - (Optional) name of the registry to query, default registry is used if not given (You can change the default registry via the API if required)\npackageName - the name of the package\nusers - a complete array of all user id\u0027s that are allowed to view this package.\n\n## OUTPUT\nsuccess - true if successful","serviceinputs":[{"inputName":"registry","inputType":"String","inputComments":"no comment","required":false,"wrapperType":"--"},{"inputName":"packageName","inputType":"String","inputComments":"no comment","required":true,"wrapperType":"--"},{"inputName":"user","inputType":"String","inputComments":"no comment","required":true,"wrapperType":"--"}],"serviceoutputs":[{"outputName":"success","outputType":"Object","outputComments":"no comment","required":true,"wrapperType":"java.lang.Boolean"}]},{"serviceName":"wx.packages.manager.packages_.services:updateUsers","description":"## Update users\n\nPrivate registries require that all users authenticate in order to be able to browse the packages. In addition Administrators can choose to show packages only to certain users\nby using this method.\n\nA package can be made visible to all users by setting the list to [\u0027everybody\u0027] and should reference at least one user if it is to not be invisible. The only exception to this is the \n\u0027Administrator\u0027 user which can view all packages regardless permissions. Be aware this applies only to this user and not other admin users.\n\n*NOTE:* You will need administrator level permissions to use this method.\n\n\n**INPUT**\nregistry - (Optional) name of the registry to query, default registry is used if not given (You can change the default registry via the API if required)\npackageName - the name of the package\nusers - a complete array of all user id\u0027s that are allowed to view this package.\n\n## OUTPUT\nsuccess - true if successful","serviceinputs":[{"inputName":"registry","inputType":"String","inputComments":"no comment","required":false,"wrapperType":"--"},{"inputName":"packageName","inputType":"String","inputComments":"no comment","required":true,"wrapperType":"--"},{"inputName":"users","inputType":"String List","inputComments":"no comment","required":true,"wrapperType":"--"}],"serviceoutputs":[{"outputName":"success","outputType":"Object","outputComments":"no comment","required":true,"wrapperType":"java.lang.Boolean"}]},{"serviceName":"wx.packages.manager.packages_.services:voteDown","description":"Allows user to add a negative vote for this packasge, a user can only vote up or down once. Multiple down votes will be ignored. A down vote can be cancelled by making an up vote.","serviceinputs":[{"inputName":"registry","inputType":"String","inputComments":"no comment","required":false,"wrapperType":"--"},{"inputName":"packageName","inputType":"String","inputComments":"no comment","required":true,"wrapperType":"--"}],"serviceoutputs":[{"outputName":"success","outputType":"Object","outputComments":"no comment","required":true,"wrapperType":"java.lang.Boolean"},{"outputName":"canceledVote","outputType":"Object","outputComments":"no comment","required":false,"wrapperType":"java.lang.Boolean"}]},{"serviceName":"wx.packages.manager.packages_.services:voteUp","description":"Allow user to add a positive vote for this packasge, a user can only vote up or down once. Multiple votes votes will be ignored. An up vote can be cancelled by making a down vote.","serviceinputs":[{"inputName":"registry","inputType":"String","inputComments":"no comment","required":false,"wrapperType":"--"},{"inputName":"packageName","inputType":"String","inputComments":"no comment","required":true,"wrapperType":"--"}],"serviceoutputs":[{"outputName":"success","outputType":"Object","outputComments":"no comment","required":true,"wrapperType":"java.lang.Boolean"},{"outputName":"canceledVote","outputType":"Object","outputComments":"no comment","required":false,"wrapperType":"java.lang.Boolean"}]},{"serviceName":"wx.packages.manager.registry_.services:createRegistry","description":"## Create Registry\n\nCreates a new registry with the given properties. The registry name must be unique otherwise an exception is thrown.\n\nYou can create either a public or private registry. Public registries can be accessed anonymously without any access retrictions.\nA private registry requires that the caller is authenticated and only lists packages that are flagged for everybody or to which they have been granted access.\n\nThe trustLevel is an integer from 0 to 3. Where 0 offers no trust to 3 with absolution trust. Packages belonging to a trusted version will require\nthat the packages are trusted, i.e. that they are signed and the signature is registered in the registry.\n\nThis method can be called anonymously, but will only show public registries, private registries will only be shown to recognised users.\n \n## INPUT\nname - Simple unique name (spaces and special characters will replaced with \u0027-\u0027 and upper case characters converted to lowercase)\ndescription - (optional) long description of registry, included in package view page.\nsearchTags - (optional) an array of search keys.\ntype - Either \u0027public\u0027 or \u0027private\u0027.\ntrustLevel - a value between 0 (no trust) to 3 (absolute trust)\ndefault - (optional) if set to true, this registry will become the default registry.\n\n## OUTPUT\nsuccess - true if registry is created\n\n\n## EXCEPTION\nthrown if either a registry already exists for the given name or a required input is missing","serviceinputs":[{"inputName":"name","inputType":"String","inputComments":"no comment","required":true,"wrapperType":"--"},{"inputName":"description","inputType":"String","inputComments":"no comment","required":true,"wrapperType":"--"},{"inputName":"legal","inputType":"String","inputComments":"no comment","required":true,"wrapperType":"--"},{"inputName":"searchTags","inputType":"String List","inputComments":"no comment","required":false,"wrapperType":"--"},{"inputName":"type","inputType":"String","inputComments":"no comment","required":true,"wrapperType":"--"},{"inputName":"trustLevel","inputType":"Object","inputComments":"no comment","required":true,"wrapperType":"java.lang.Integer"},{"inputName":"default","inputType":"Object","inputComments":"no comment","required":true,"wrapperType":"java.lang.Boolean"}],"serviceoutputs":[{"outputName":"success","outputType":"Object","outputComments":"no comment","required":true,"wrapperType":"java.lang.Boolean"}]},{"serviceName":"wx.packages.manager.registry_.services:getRegistry","description":"## Get registry\n\nReturns the details for the given registry. \n\nThis method can be called anonymously, but will only show public registries, private registries will only be shown to recognised users.\n\n## INPUT\nname - Simple unique name (spaces and special characters will replaced with \u0027-\u0027 and upper case characters converted to lowercase)\n\n## OUTPUT\nregistry - The details for the given registry","serviceinputs":[{"inputName":"name","inputType":"String","inputComments":"no comment","required":true,"wrapperType":"--"}],"serviceoutputs":[{"outputName":"registry(wx.packages.manager.registry_.docTypes:Registry)","outputType":"Document Reference","outputComments":"no comment","required":true,"wrapperType":"--"}]},{"serviceName":"wx.packages.manager.registry_.services:listAvailableRegistries","description":"## List available registries\n\nThe server can maintain multiple registries, which are completely independent. A \u0027default\u0027 public untrusted registry is created at startup.\nOther registries can be created and deleted. Use this method to list them and identify, which is flagged as the default registry.\n\n## INPUT\ntype - (optilonal) list only registries for the given type, \u0027private\u0027 or \u0027public\u0027\n\n## OUTPUT\n- registries - List of registry summary, including name, type, description, trustLevel, default","serviceinputs":[{"inputName":"type","inputType":"String","inputComments":"no comment","required":false,"wrapperType":"--"}],"serviceoutputs":[{"outputName":"registries(wx.packages.manager.registry_.docTypes:Registry)","outputType":"Document Reference List","outputComments":"no comment","required":true,"wrapperType":"--"}]},{"serviceName":"wx.packages.manager.registry_.services:removeRegistry","description":"## Remove registry\n\nRemoves the given registry. Reverts the default registry back to \u0027default\u0027 if this registry is flagged as the current default.\n\n*NOTE:* You will need administrator level permissions to use this method.\n\n## INPUT\nname - Simple unique name (spaces and special characters will replaced with \u0027-\u0027 and upper case characters converted to lowercase)\n\n## OUTPUT\nsuccess - true if successful","serviceinputs":[{"inputName":"name","inputType":"String","inputComments":"no comment","required":true,"wrapperType":"--"}],"serviceoutputs":[{"outputName":"success","outputType":"Object","outputComments":"no comment","required":true,"wrapperType":"java.lang.Boolean"}]},{"serviceName":"wx.packages.manager.registry_.services:setDefaultRegistry","description":"## Sets the default registry to the given registry. \n\nAll ensuing API calls to /packages resource will use this registry by default if the registry is not explicitly provided.\n\n## INPUT\nname - Simple unique name (spaces and special characters will replaced with \u0027-\u0027 and upper case characters converted to lowercase)\n\n*NOTE:* You will need administrator level permissions to use this method.\n\n## EXCEPION\nthrown in registry does not exist","serviceinputs":[{"inputName":"name","inputType":"String","inputComments":"no comment","required":true,"wrapperType":"--"}],"serviceoutputs":[{"outputName":"success","outputType":"Object","outputComments":"no comment","required":true,"wrapperType":"java.lang.Boolean"}]}];
}
this.getISEndpoint = function() { 
 return 'http://192.168.1.200:5555/';
}
this.getAPIList = function() { 
 return [{"name":"wx.packages:manager","spec":{"swagger":"2.0","info":{"description":"Package manager registry for wpm client. Provides both an API documented here for remote client use by wpm command and also UX for browsing registries, adding and removing packages.","version":"1.0","title":"Package Manager Server"},"host":"localhost:5555","basePath":"/rad/wx/packages/manager","tags":[{"name":"default","description":"Available resource types are defined below\n\n## Registries\nYou can maintain multiple registries via this API. By default a single public \u0027default\u0027 registry is created on startup. You cannot delete this one, but you can decide to switch to a different default registry if you want to.\n\n## Packages\nAllows you query registries for available packages and retrieve the necessary git information to allow the package source code to be downloaded. Anonymous access in only permitted for public registries. All other registries will require a login. Adding and removing packages requires administrator level permissions.\n\n## Credentials\nAllows you to register your github developer token so that the registry can query private git repositories for information on your packages. The tokens are encrypted before being written to the databases and can only be referenced via your login.\n\n## Notifications\nAllows you to register an email address to be informed when new package are added to a new repository or a new version of a package becomes available."}],"consumes":["application/json"],"produces":["application/json"],"paths":{"/registries":{"get":{"description":"## List available registries\n\nThe server can maintain multiple registries, which are completely independent. A \u0027default\u0027 public untrusted registry is created at startup.\nOther registries can be created and deleted. Use this method to list them and identify, which is flagged as the default registry.\n\n## INPUT\ntype - (optilonal) list only registries for the given type, \u0027private\u0027 or \u0027public\u0027\n\n## OUTPUT\n- registries - List of registry summary, including name, type, description, trustLevel, default\n\n","operationId":"registries_GET_1","parameters":[{"name":"type","in":"query","required":false,"type":"string"}],"responses":{"200":{"description":"OK","schema":{"$ref":"#/definitions/registries_GET_response"}},"401":{"description":"Access Denied"}}}},"/registries/{type}":{"get":{"description":"## List available registries\n\nThe server can maintain multiple registries, which are completely independent. A \u0027default\u0027 public untrusted registry is created at startup.\nOther registries can be created and deleted. Use this method to list them and identify, which is flagged as the default registry.\n\n## INPUT\ntype - (optilonal) list only registries for the given type, \u0027private\u0027 or \u0027public\u0027\n\n## OUTPUT\n- registries - List of registry summary, including name, type, description, trustLevel, default\n\n","operationId":"registriestype_GET_2","parameters":[{"name":"type","in":"path","required":true,"type":"string"}],"responses":{"200":{"description":"OK","schema":{"$ref":"#/definitions/registriestype_GET_response"}},"401":{"description":"Access Denied"}}}},"/registry":{"get":{"description":"## Get registry\n\nReturns the details for the given registry. \n\nThis method can be called anonymously, but will only show public registries, private registries will only be shown to recognised users.\n\n## INPUT\nname - Simple unique name (spaces and special characters will replaced with \u0027-\u0027 and upper case characters converted to lowercase)\n\n## OUTPUT\nregistry - The details for the given registry","operationId":"registry_GET_3","parameters":[{"name":"name","in":"header","required":true,"type":"string"}],"responses":{"200":{"description":"OK","schema":{"$ref":"#/definitions/registry_GET_response"}},"401":{"description":"Access Denied"}}},"post":{"description":"## Create Registry\n\nCreates a new registry with the given properties. The registry name must be unique otherwise an exception is thrown.\n\nYou can create either a public or private registry. Public registries can be accessed anonymously without any access retrictions.\nA private registry requires that the caller is authenticated and only lists packages that are flagged for everybody or to which they have been granted access.\n\nThe trustLevel is an integer from 0 to 3. Where 0 offers no trust to 3 with absolution trust. Packages belonging to a trusted version will require\nthat the packages are trusted, i.e. that they are signed and the signature is registered in the registry.\n\nThis method can be called anonymously, but will only show public registries, private registries will only be shown to recognised users.\n \n## INPUT\nname - Simple unique name (spaces and special characters will replaced with \u0027-\u0027 and upper case characters converted to lowercase)\ndescription - (optional) long description of registry, included in package view page.\nsearchTags - (optional) an array of search keys.\ntype - Either \u0027public\u0027 or \u0027private\u0027.\ntrustLevel - a value between 0 (no trust) to 3 (absolute trust)\ndefault - (optional) if set to true, this registry will become the default registry.\n\n## OUTPUT\nsuccess - true if registry is created\n\n\n## EXCEPTION\nthrown if either a registry already exists for the given name or a required input is missing","operationId":"registry_POST_3","consumes":["application/x-www-form-urlencoded"],"parameters":[{"name":"name","in":"formData","required":true,"type":"string"},{"name":"description","in":"formData","required":true,"type":"string"},{"name":"legal","in":"formData","required":true,"type":"string"},{"name":"searchTags","in":"formData","required":false,"type":"array","items":{"type":"string"},"collectionFormat":"multi"},{"name":"type","in":"formData","required":true,"type":"string"},{"name":"trustLevel","in":"formData","required":true,"type":"integer","format":"int32"},{"name":"default","in":"formData","required":true,"type":"boolean"}],"responses":{"200":{"description":"OK","schema":{"$ref":"#/definitions/registry_POST_response"}},"401":{"description":"Access Denied"}}}},"/registry/{name}":{"get":{"description":"## Get registry\n\nReturns the details for the given registry. \n\nThis method can be called anonymously, but will only show public registries, private registries will only be shown to recognised users.\n\n## INPUT\nname - Simple unique name (spaces and special characters will replaced with \u0027-\u0027 and upper case characters converted to lowercase)\n\n## OUTPUT\nregistry - The details for the given registry","operationId":"registryname_GET_4","parameters":[{"name":"name","in":"path","required":true,"type":"string"}],"responses":{"200":{"description":"OK","schema":{"$ref":"#/definitions/registryname_GET_response"}},"401":{"description":"Access Denied"}}},"put":{"description":"## Sets the default registry to the given registry. \n\nAll ensuing API calls to /packages resource will use this registry by default if the registry is not explicitly provided.\n\n## INPUT\nname - Simple unique name (spaces and special characters will replaced with \u0027-\u0027 and upper case characters converted to lowercase)\n\n*NOTE:* You will need administrator level permissions to use this method.\n\n## EXCEPION\nthrown in registry does not exist","operationId":"registryname_PUT_4","consumes":["application/x-www-form-urlencoded"],"parameters":[{"name":"name","in":"path","required":true,"type":"string"}],"responses":{"200":{"description":"OK","schema":{"$ref":"#/definitions/registryname_PUT_response"}},"401":{"description":"Access Denied"}}},"delete":{"description":"## Remove registry\n\nRemoves the given registry. Reverts the default registry back to \u0027default\u0027 if this registry is flagged as the current default.\n\n*NOTE:* You will need administrator level permissions to use this method.\n\n## INPUT\nname - Simple unique name (spaces and special characters will replaced with \u0027-\u0027 and upper case characters converted to lowercase)\n\n## OUTPUT\nsuccess - true if successful","operationId":"registryname_DELETE_4","parameters":[{"name":"name","in":"path","required":true,"type":"string"}],"responses":{"200":{"description":"OK","schema":{"$ref":"#/definitions/registryname_DELETE_response"}},"401":{"description":"Access Denied"}}}},"/notifications":{"get":{"description":"## List available notifications for logged in user\n\nList all of the registry/package email notifications for the current user.\n\n## INPUT\nregistry - (optional) filter notifications for given registry, only applicable for package notifications.\n\n## OUTPUT\nnotifications - list of notifications\n","operationId":"notifications_GET_5","parameters":[{"name":"registry","in":"query","required":false,"type":"string"}],"responses":{"200":{"description":"OK","schema":{"$ref":"#/definitions/notifications_GET_response"}},"401":{"description":"Access Denied"}}}},"/notification":{"post":{"description":"## Add Notification\n\nAdd email notification for changes to the given package or registry.\n\n## INPUT\nregistry - registry of package if package or null if name (below) is a registry\nname - the name of the registry or package on which to receive notifications.\nisPackage - true if name is a package or false if name is a registry\nfriendlyName - name to be used in email body\nemail - email address to use for notification\n\n## OUTPUT\nsuccess - true if notification added successfully, false if registry or package don\u0027t exist or if email already registered for given asset","operationId":"notification_POST_6","consumes":["application/x-www-form-urlencoded"],"parameters":[{"name":"registry","in":"formData","required":false,"type":"string"},{"name":"name","in":"formData","required":true,"type":"string"},{"name":"isPackage","in":"formData","required":true,"type":"boolean"},{"name":"friendlyName","in":"formData","required":false,"type":"string"},{"name":"email","in":"formData","required":true,"type":"string"}],"responses":{"200":{"description":"OK","schema":{"$ref":"#/definitions/notification_POST_response"}},"401":{"description":"Access Denied"}}}},"/notification/{name}":{"delete":{"description":"## Remove registry/package notification\n\nRemoves the email notification for the given registry or package associated with the current user.\n\n## INPUT\nregistry - (optional) - only required if name is for package that is not in the default registry\nname - name of registry or package\nisPackage - true if name is a package, false if a registry\n\n## OUTPUT\nsuccess - true if notification exists and was removed, false if not","operationId":"notificationname_DELETE_7","parameters":[{"name":"registry","in":"query","required":false,"type":"string"},{"name":"name","in":"path","required":true,"type":"string"},{"name":"isPackage","in":"query","required":true,"type":"boolean"}],"responses":{"200":{"description":"OK","schema":{"$ref":"#/definitions/notificationname_DELETE_response"}},"401":{"description":"Access Denied"}}}},"/notification/email/{email}":{"put":{"description":"## Set default email for user\n\nAssociates an email address with the given user.\n\n## INPUT\nemail\n\n## OUTPUT\nsuccess - true if db updated, false if not","operationId":"notificationemailemail_PUT_8","consumes":["application/x-www-form-urlencoded"],"parameters":[{"name":"email","in":"path","required":true,"type":"string"}],"responses":{"200":{"description":"OK","schema":{"$ref":"#/definitions/notificationemailemail_PUT_response"}},"401":{"description":"Access Denied"}}}},"/notification/email":{"get":{"description":"## get default email for logged in user\n\nReturns  email address for the given user.\n\n## INPUT\nnone\n\n## OUTPUT\nemail","operationId":"notificationemail_GET_9","parameters":[],"responses":{"200":{"description":"OK","schema":{"$ref":"#/definitions/notificationemail_GET_response"}},"401":{"description":"Access Denied"}}},"delete":{"description":"## Set default email for user\n\nAssociates an email address with the given user.\n\n## INPUT\nemail\n\n## OUTPUT\nsuccess - true if db updated, false if not","operationId":"notificationemail_DELETE_9","parameters":[{"name":"email","in":"query","required":false,"type":"string"}],"responses":{"200":{"description":"OK","schema":{"$ref":"#/definitions/notificationemail_DELETE_response"}},"401":{"description":"Access Denied"}}}},"/credentials":{"get":{"description":"## List git tokens\n \nRetrieves all of the git credentials that you have registered for different git servers. This API requires that you are logged in and will only show credentials associated with your login\n\nNOTE: You should not use your git login/password as it will not work. Instead generate a developer access token via the settings menu when logged into github.\n\n## Input \nNone\n\n## Output\nList of git credentials associated with your user id.","operationId":"credentials_GET_10","parameters":[],"responses":{"200":{"description":"OK","schema":{"$ref":"#/definitions/credentials_GET_response"}},"401":{"description":"Access Denied"}}},"post":{"description":"## Register GIT credentials\n\nEncrypts and then persists the git token for later user. This token will only be used in relation to your login and will only be used to query private git repositories to allow you download the package source code.\n\nNOTE: You should not use your git login/password as it will not work. Instead generate a developer access token via the settings menu when logged into github.\n\n## INPUT\nsource - git url of server that the credentials are for\nuser - your user id (NOT that of the owner of the repository)\ntoken - Developer access token that you have generated.\n\n## OUTPUT\nnone","operationId":"credentials_POST_10","consumes":["application/x-www-form-urlencoded"],"parameters":[{"name":"source","in":"formData","required":true,"type":"string"},{"name":"user","in":"formData","required":true,"type":"string"},{"name":"token","in":"formData","required":true,"type":"string"}],"responses":{"200":{"description":"OK","schema":{"$ref":"#/definitions/credentials_POST_response"}},"401":{"description":"Access Denied"}}}},"/credentials/{source}/{user}":{"delete":{"description":"## Remove use token\n\nDelete the developer token for the git source and user.\n\nNOTE: this will only delete credentials associated with the current logged in user.\n\n## INPUT\nsource - the source url of the associated git server\nuser - the id associated with the token\n\n## OUTPUT\nsuccess - true if operation was successful","operationId":"credentialssourceuser_DELETE_11","parameters":[{"name":"source","in":"path","required":true,"type":"string"},{"name":"user","in":"path","required":true,"type":"string"}],"responses":{"200":{"description":"OK","schema":{"$ref":"#/definitions/credentialssourceuser_DELETE_response"}},"401":{"description":"Access Denied"}}}},"/packages":{"get":{"description":"## List Packages\nlists all packages for the given registry, category and filter. All inputs are optional, if no registry is given assumes that the default registry should be queried.\nThe list tops out at a maximum of 50 rows, the user should either apply a category or filter if the list is too long. Results our ordered by download count descending.\n\nNOTE: private registries will only list packages to which the user has been granted access, including administrators. The only exception being the special user\n\u0027Administrator\u0027 who can see all packages regardless of access permissions.\n\nThis method can be called anoymously, but will only return packages for public registries\n\n**INPUT**\nregistry - (Optional) name of the registry to query, default registry is used if not given (You can change the default registry via the API if required)\ncategory - (Optional) The category of the packages to list (categories should be prefefined by registry owner).\nfilter - (Optional) can be used to filter against the package name or description to shorten results.\n\n**OUTPUT**\npackages - list of package summary including the name, category, description, registration date, searchTags and totalDownloads.","operationId":"packages_GET_12","parameters":[{"name":"registry","in":"query","required":false,"type":"string"},{"name":"category","in":"query","required":false,"type":"string"},{"name":"filter","in":"query","required":false,"type":"string"}],"responses":{"200":{"description":"OK","schema":{"$ref":"#/definitions/packages_GET_response"}},"401":{"description":"Access Denied"}}}},"/packages/{filter}":{"get":{"description":"## List Packages\nlists all packages for the given registry, category and filter. All inputs are optional, if no registry is given assumes that the default registry should be queried.\nThe list tops out at a maximum of 50 rows, the user should either apply a category or filter if the list is too long. Results our ordered by download count descending.\n\nNOTE: private registries will only list packages to which the user has been granted access, including administrators. The only exception being the special user\n\u0027Administrator\u0027 who can see all packages regardless of access permissions.\n\nThis method can be called anoymously, but will only return packages for public registries\n\n**INPUT**\nregistry - (Optional) name of the registry to query, default registry is used if not given (You can change the default registry via the API if required)\ncategory - (Optional) The category of the packages to list (categories should be prefefined by registry owner).\nfilter - (Optional) can be used to filter against the package name or description to shorten results.\n\n**OUTPUT**\npackages - list of package summary including the name, category, description, registration date, searchTags and totalDownloads.","operationId":"packagesfilter_GET_13","parameters":[{"name":"registry","in":"query","required":false,"type":"string"},{"name":"category","in":"query","required":false,"type":"string"},{"name":"filter","in":"path","required":true,"type":"string"}],"responses":{"200":{"description":"OK","schema":{"$ref":"#/definitions/packagesfilter_GET_response"}},"401":{"description":"Access Denied"}}}},"/package/{packageName}/info":{"get":{"description":"## Get package details\n\nRetrieves all of the information that we have on the package.\n\nNOTE: the isSigned and isValid outputs are only applicable to trusted registries i.e. a trusted registry requires that someone vets the package and records its code signature\nso that it cannot be altered aftewards.\n\nThis method can be called anoymously, but will only return packages for public registries\n\n## INPUT\nregistry - registry to query, uses default if not provided.\npackageName - the package to be downloaded.\n\n## OUTPUT\nname - name of the package \ndescription - (optional) long description given to package\ncategory - category, should be predefined by registry owner\nowner - The user id of the user who originall registered the package\nownedByMe - true if you are the original registrator\nsearchTags - an array of search keys \nregisteredDate - the date (dd-MM-yyyy) when the package was registered here\ntrustedTags - list of tags that have been trusted for use\navailableTags - list of tags that have not been checked or trusted\nhomePage - the page of the package as provided by git\nwatchers - the number of watchers on the git repository given for the source code\nstargazers - the number of stargazers on the git repository given for the source code\nlastUpdated - the last time a commit was made to the git repository\nprivate - true if the package is associated with a private registry i.e. requires authentication with the registry in order to be visible\nusers - This is a an array list of user ids that are allowed to access the package (this is only applicable for private registries/packags)\nsourceUrl - the git repository url for cloning the package.\nsourceIsPrivate - true if the registry is a private registry, i.e. requires authentication to access\nsourceUserId - a git user id associated with git repo that can be used for eventual authentication.\ntotalDownloads - number of total downloads since package was registered\nrecentDownloads - The number of downloads today.\n\n## ERRORS\n(1) Non existent package/tag or associated with private repository for which you don\u0027t have permission","operationId":"packagepackageNameinfo_GET_14","parameters":[{"name":"registry","in":"query","required":false,"type":"string"},{"name":"packageName","in":"path","required":true,"type":"string"},{"name":"includeManifestInfo","in":"query","required":false,"type":"string"}],"responses":{"200":{"description":"OK","schema":{"$ref":"#/definitions/packagepackageNameinfo_GET_response"}},"401":{"description":"Access Denied"}}}},"/package":{"post":{"description":"## Register a new package\n\nRegisters a webMethods package and its git repository in the registry. The git credentials need only be provided if the git repository is provided. \nThe credentials will only be associated with the the current user. Other developers will have to register their own credentials if they want to be able to download the package.\n\nThe git repo can either represent a proper package i.e. the git root is the package root folder, or it can be used to host more than one package. In which cases the git repo must \nhave a sub-folder with the same name as the package e.g.\n\n.git\n/MyGreatPackage\n/JcPublicTools\netc.\n\nYou will need to specify the input \u0027sourcePath\u0027 if the packages are not in the git root e.g.\n\n.git\n/packages/MyGreatPackage\n/package/JcPublicTools\n\nin which case the sourcePath would be \u0027packages\u0027.\n\n*NOTE:* You will need administrator level permissions to use this method.\n\n## INPUT\nregistry - (optional) name of the registry to query, default registry is used if not given (You can change the default registry via the API if required)\npackageName - the name of the package\ncategory - category, should be predefined by registry owner\ndescription -(optional) long description for package\nsearchTags - (optional) an array of search keys \ntrustedTag - (optional) a tag that will be trusted for use.\nsignatureTag - (optional) provide the signature for the trusted tag (Used to check that the tag doesn\u0027t get replaced later)\nsourceUrl - the git repository url for cloning the package.\nsourceIsPrivate - (optional) set to true if the git repository is private.\nsourcePath - (optional) specify this if the package is in a sub-directory of the git repo, assumption is that there is a folder with the same name as the package.\nusers - an array of users ids that will be allowed to view/download the package (Only applicable for private registries)\n\n## OUTPUT\nsuccess - true if package was registered","operationId":"package_POST_15","consumes":["application/x-www-form-urlencoded"],"parameters":[{"name":"registry","in":"query","required":false,"type":"string"},{"name":"packageName","in":"formData","required":true,"type":"string"},{"name":"category","in":"formData","required":true,"type":"string"},{"name":"description","in":"formData","required":true,"type":"string"},{"name":"searchTags","in":"formData","required":true,"type":"array","items":{"type":"string"},"collectionFormat":"multi"},{"name":"homePage","in":"formData","required":true,"type":"string"},{"name":"sourceUrl","in":"formData","required":true,"type":"string"},{"name":"sourceIsPrivate","in":"formData","required":true,"type":"boolean"},{"name":"sourcePath","in":"formData","required":false,"type":"string"},{"name":"trustedTag","in":"formData","required":false,"type":"string"},{"name":"signatureTag","in":"formData","required":false,"type":"string"},{"name":"users","in":"formData","required":false,"type":"array","items":{"type":"string"},"collectionFormat":"multi"}],"responses":{"200":{"description":"OK","schema":{"$ref":"#/definitions/package_POST_response"}},"401":{"description":"Access Denied"}}}},"/package/{packageName}":{"get":{"description":"## get download properties for a package\n\nRetrieves the necessary git properties including your access token so that you can download the package source code locally.\n\nNOTE: the sourceToken is a private key that should be used to authenticate if the associated git is private. They key should be written to a local\nsecure file (i.e. readonly to the specific user) and then included in the git command as such where github_rsa is the name of the file.\n\n```\n$ git clone git@github.com:johnpcarter/wm.git --config core.sshCommand\u003d\"ssh -i github_rsa\"\n```\n\nThis method can be called anoymously, but will only return packages for public registries\n\nNOTE: The above command will only give read access to the git repository and does not provide any collaboration features.\n\n## INPUT\nregistry - registry to query, uses default if not provided.\npackageName - the package to be downloaded.\n\n## OUTPUT\nsourceUrl - the url to the git repository\nsourceUserId - your git id (required if the git repo is private)\nsourceToken - the git token that you generated to allow access to private repo\n\n## ERRORS\n(1) Non existent package/tag or associated with private repository for which you don\u0027t have permission\n","operationId":"packagepackageName_GET_16","parameters":[{"name":"registry","in":"query","required":false,"type":"string"},{"name":"packageName","in":"path","required":true,"type":"string"}],"responses":{"200":{"description":"OK","schema":{"$ref":"#/definitions/packagepackageName_GET_response"}},"401":{"description":"Access Denied"}}},"delete":{"description":"## Remove package\n\nRemoves the given package from the given registry.\n\n*NOTE:* You will need administrator level permissions to use this method.\n\n**INPUT**\nregistry - (Optional) name of the registry to query, default registry is used if not given (You can change the default registry via the API if required)\nname - the name of the package\n\n## OUTPUT\nsuccess - true if successful","operationId":"packagepackageName_DELETE_16","parameters":[{"name":"registry","in":"query","required":false,"type":"string"},{"name":"packageName","in":"path","required":true,"type":"string"}],"responses":{"200":{"description":"OK","schema":{"$ref":"#/definitions/packagepackageName_DELETE_response"}},"401":{"description":"Access Denied"}}}},"/package/{packageName}/tag/{tag}":{"get":{"description":"## get Tag Info\n\nRetrieves the git information for the given tag version.\n\nThis method can be called anoymously, but will only return packages for public registries\n\n\n## INPUT\nregistry - registry to query, uses default if not provided.\npackageName - the package to be downloaded.\ntag - The tag to be queried\n\n## OUTPUT\n\nmessage - The message associated with the commit for the tag\ncommitter - Details on the person who made the commit\nverification - Flags if the tag has been signed and validated.\n\n## EXCEPTION\nthrown if either package or tag is not recognised\nthrown if associated git repository is private the current user does not have sufficient priviledges","operationId":"packagepackageNametagtag_GET_17","parameters":[{"name":"registry","in":"query","required":false,"type":"string"},{"name":"packageName","in":"path","required":true,"type":"string"},{"name":"tag","in":"path","required":true,"type":"string"}],"responses":{"200":{"description":"OK","schema":{"$ref":"#/definitions/packagepackageNametagtag_GET_response"}},"401":{"description":"Access Denied"}}},"post":{"description":"## Trust tag\n\nFlags that the given tag is to be trusted for use in this registry. The signature ensures that a developer cannot replace the tag after this verification process has completed i.e. \nthe signature is recorded and can compared against the git repository when downloading to check that it hasn\u0027t changed.\n\nDevelopers can still force download packages using the query params ?ignoreVerification\u003dtrue\u0026ignoreSignatureMatch\u003dtrue if required\n\n*NOTE:* You will need administrator level permissions to use this method.\n\n**INPUT**\nregistry - (Optional) name of the registry to query, default registry is used if not given (You can change the default registry via the API if required)\nname - the name of the package\ntag - the tag to be added to the registry.\nsignature - the code signature of the tag\n\n## OUTPUT\nsuccess - true if successful\n\n","operationId":"packagepackageNametagtag_POST_17","consumes":["application/x-www-form-urlencoded"],"parameters":[{"name":"registry","in":"query","required":false,"type":"string"},{"name":"packageName","in":"path","required":true,"type":"string"},{"name":"tag","in":"path","required":true,"type":"string"},{"name":"signature","in":"formData","required":false,"type":"string"}],"responses":{"200":{"description":"OK","schema":{"$ref":"#/definitions/packagepackageNametagtag_POST_response"}},"401":{"description":"Access Denied"}}},"delete":{"description":"## Untrust tag\n\nRemoves the tag information from the local registry i.e. we will no longer flag it as trusted.\n\n*NOTE:* You will need administrator level permissions to use this method.\n\n**INPUT**\nregistry - (Optional) name of the registry to query, default registry is used if not given (You can change the default registry via the API if required)\nname - the name of the package\ntag - the tag to be removed from the registry.\n\n## OUTPUT\nsuccess - true if successful","operationId":"packagepackageNametagtag_DELETE_17","parameters":[{"name":"registry","in":"query","required":false,"type":"string"},{"name":"packageName","in":"path","required":true,"type":"string"},{"name":"tag","in":"path","required":true,"type":"string"}],"responses":{"200":{"description":"OK","schema":{"$ref":"#/definitions/packagepackageNametagtag_DELETE_response"}},"401":{"description":"Access Denied"}}}},"/package/{packageName}/users":{"get":{"operationId":"packagepackageNameusers_GET_18","parameters":[{"name":"registry","in":"query","required":false,"type":"string"},{"name":"packageName","in":"path","required":true,"type":"string"},{"name":"filter","in":"query","required":false,"type":"string"}],"responses":{"200":{"description":"OK","schema":{"$ref":"#/definitions/packagepackageNameusers_GET_response"}},"401":{"description":"Access Denied"}}},"post":{"description":"## Update users\n\nPrivate registries require that all users authenticate in order to be able to browse the packages. In addition Administrators can choose to show packages only to certain users\nby using this method.\n\nA package can be made visible to all users by setting the list to [\u0027everybody\u0027] and should reference at least one user if it is to not be invisible. The only exception to this is the \n\u0027Administrator\u0027 user which can view all packages regardless permissions. Be aware this applies only to this user and not other admin users.\n\n*NOTE:* You will need administrator level permissions to use this method.\n\n\n**INPUT**\nregistry - (Optional) name of the registry to query, default registry is used if not given (You can change the default registry via the API if required)\npackageName - the name of the package\nusers - a complete array of all user id\u0027s that are allowed to view this package.\n\n## OUTPUT\nsuccess - true if successful","operationId":"packagepackageNameusers_POST_18","consumes":["application/x-www-form-urlencoded"],"parameters":[{"name":"registry","in":"query","required":false,"type":"string"},{"name":"packageName","in":"path","required":true,"type":"string"},{"name":"users","in":"formData","required":true,"type":"array","items":{"type":"string"},"collectionFormat":"multi"}],"responses":{"200":{"description":"OK","schema":{"$ref":"#/definitions/packagepackageNameusers_POST_response"}},"401":{"description":"Access Denied"}}}},"/package/{packageName}/main/download":{"get":{"description":"## Download package\n\nAttempts to download the package from the associated git repository. It will attempt to use you git credentials in the case of a private repositority. However this will require that you are logged in \nand that you have previously persisted your git credentials via the /credentials API.\n\nIf you using a trusted registry then only trusted \u0027tagged\u0027 versions can be downloaded i.e. the code must be signed, valid and match the one as flagged as trusted in the registry.\nThis behaviour can be overridden by the ignoreVerification and ignoreSignatureMatch query params.\n\nThis method can be called anoymously, but will only return packages for public registries\n\n## INPUT\nregistry - registry to query, uses default if not provided.\npackageName - the package to be downloaded.\ntag - (optional) branch tag to download, main branch is used if not given.\nignoreVerification - (optional) default is false, exception  raised if tag is signed but considered not valid.\nignoreSignatureMatch - (optional) default is false, exception raised if the signature of the branch does not match the one on record.\n\n## OUTPUT\nmulti-part content with main part in application/zip format. \n\n## ERRORS\n(1) Non existent package/tag or associated with private repository for which you don\u0027t have permission\n(2) tag is signed but considered invalid and ignoreVerification not set to true\n(3) tag is signed and valid but has been replaced since tag was recorded in the registry, and ignoreSignatureMatch not set to true \n","operationId":"packagepackageNamemaindownload_GET_19","parameters":[{"name":"registry","in":"query","required":false,"type":"string"},{"name":"packageName","in":"path","required":true,"type":"string"},{"name":"tag","in":"query","required":false,"type":"string"},{"name":"ignoreVerification","in":"query","required":false,"type":"boolean"},{"name":"ignoreSignatureMatch","in":"query","required":false,"type":"boolean"}],"responses":{"200":{"description":"OK"},"401":{"description":"Access Denied"}}}},"/package/{packageName}/{tag}/download":{"get":{"description":"## Download package\n\nAttempts to download the package from the associated git repository. It will attempt to use you git credentials in the case of a private repositority. However this will require that you are logged in \nand that you have previously persisted your git credentials via the /credentials API.\n\nIf you using a trusted registry then only trusted \u0027tagged\u0027 versions can be downloaded i.e. the code must be signed, valid and match the one as flagged as trusted in the registry.\nThis behaviour can be overridden by the ignoreVerification and ignoreSignatureMatch query params.\n\nThis method can be called anoymously, but will only return packages for public registries\n\n## INPUT\nregistry - registry to query, uses default if not provided.\npackageName - the package to be downloaded.\ntag - (optional) branch tag to download, main branch is used if not given.\nignoreVerification - (optional) default is false, exception  raised if tag is signed but considered not valid.\nignoreSignatureMatch - (optional) default is false, exception raised if the signature of the branch does not match the one on record.\n\n## OUTPUT\nmulti-part content with main part in application/zip format. \n\n## ERRORS\n(1) Non existent package/tag or associated with private repository for which you don\u0027t have permission\n(2) tag is signed but considered invalid and ignoreVerification not set to true\n(3) tag is signed and valid but has been replaced since tag was recorded in the registry, and ignoreSignatureMatch not set to true \n","operationId":"packagepackageNametagdownload_GET_20","parameters":[{"name":"registry","in":"query","required":false,"type":"string"},{"name":"packageName","in":"path","required":true,"type":"string"},{"name":"tag","in":"path","required":true,"type":"string"},{"name":"ignoreVerification","in":"query","required":false,"type":"boolean"},{"name":"ignoreSignatureMatch","in":"query","required":false,"type":"boolean"}],"responses":{"200":{"description":"OK"},"401":{"description":"Access Denied"}}}},"/package/{packageName}/move/{toRegistry}":{"put":{"description":"## movePackage\n\nallows a package to be moved from one registry to another. Will trigger an exception if a package of the same name already exists in the targetted registry\n\n**INPUT**\nregistry - (Optional) name of the registry to query, default registry is used if not given (You can change the default registry via the API if required)\npackageName - (Mandatory) The name of the package to be moved.\ntoRegistry - (Mandatory) the name of the registry to move the package into.\ncopy - (optional) set to true if you want to copy the package to the new registry without removing it from the existing registry.\n\n**OUTPUT**\nsuccess - true if package migrated successfully.","operationId":"packagepackageNamemovetoRegistry_PUT_21","consumes":["application/x-www-form-urlencoded"],"parameters":[{"name":"registry","in":"query","required":false,"type":"string"},{"name":"packageName","in":"path","required":true,"type":"string"},{"name":"toRegistry","in":"path","required":true,"type":"string"},{"name":"copy","in":"query","required":false,"type":"boolean"}],"responses":{"200":{"description":"OK"},"401":{"description":"Access Denied"}}}},"/package/{packageName}/visibility/{isVisible}":{"put":{"description":"## setVisibility\n\nflags whether package should be visible to non Administrator users. Only applies to registries that are non public and have a trust level greater than 0.\n\n**INPUT**\nregistry - (Optional) name of the registry to query, default registry is used if not given (You can change the default registry via the API if required)\npackageName - (Mandatory) The name of the package to be updated.\nisVisible - (Mandatory) set to false to hide package from package listing.\n\n**OUTPUT**\nsuccess - true if package migrated successfully.","operationId":"packagepackageNamevisibilityisVisible_PUT_22","consumes":["application/x-www-form-urlencoded"],"parameters":[{"name":"registry","in":"query","required":false,"type":"string"},{"name":"packageName","in":"path","required":true,"type":"string"},{"name":"isVisible","in":"path","required":true,"type":"string"}],"responses":{"200":{"description":"OK","schema":{"$ref":"#/definitions/packagepackageNamevisibilityisVisible_PUT_response"}},"401":{"description":"Access Denied"}}}},"/package/{packageName}/history":{"get":{"description":"## Get package details\n\nReturns the number of downloads for the given package based over time\n\n## INPUT\nregistry - registry to query, uses default if not provided.\npackageName - the package to be queried.\n\n## OUTPUT\nvalues - an array of label/value pairs where label is the interval description (e.g. date or time) and value is an integer of the total downloads","operationId":"packagepackageNamehistory_GET_23","parameters":[{"name":"registry","in":"query","required":false,"type":"string"},{"name":"packageName","in":"path","required":true,"type":"string"}],"responses":{"200":{"description":"OK","schema":{"$ref":"#/definitions/packagepackageNamehistory_GET_response"}},"401":{"description":"Access Denied"}}}},"/package/{packageName}/git":{"get":{"operationId":"packagepackageNamegit_GET_24","parameters":[{"name":"registry","in":"query","required":false,"type":"string"},{"name":"packageName","in":"path","required":true,"type":"string"}],"responses":{"200":{"description":"OK","schema":{"$ref":"#/definitions/packagepackageNamegit_GET_response"}},"401":{"description":"Access Denied"}}}},"/package/{packageName}/user/{user}":{"post":{"description":"## Sync user deploy with git\n\nThis service generate a public/private key pair and uploads the public key to the git repository to ensure that a private git repositories can be accessed by sharing a ssh rsa public key as a deploy key. \nThe private key is stored locally and provided to any third party client if authenticated agaist the given user. This will ensure that they can pull the code with something like the following\nif they write the key to a local file called github_rsa.\n\n```\n$ git clone git@github.com:johnpcarter/wm.git --config core.sshCommand\u003d\"ssh -i github_rsa\"\n```\n\n*NOTE:* You will need administrator level permissions to use this method. Also the above command will only read access to the git repository and does not provide any collaboration features.\n\n\n**INPUT**\nregistry - (Optional) name of the registry to query, default registry is used if not given (You can change the default registry via the API if required)\npackageName - the name of the package\nuser - the id of the local user to be synced with git\n\n## OUTPUT\nsuccess - true if successful","operationId":"packagepackageNameuseruser_POST_25","consumes":["application/x-www-form-urlencoded"],"parameters":[{"name":"registry","in":"query","required":false,"type":"string"},{"name":"packageName","in":"path","required":true,"type":"string"},{"name":"user","in":"path","required":true,"type":"string"}],"responses":{"200":{"description":"OK","schema":{"$ref":"#/definitions/packagepackageNameuseruser_POST_response"}},"401":{"description":"Access Denied"}}}},"/package/{packageName}/manifest":{"get":{"description":"Fetches the package manifest file from the remote git repository","operationId":"packagepackageNamemanifest_GET_26","parameters":[{"name":"registry","in":"query","required":false,"type":"string"},{"name":"packageName","in":"path","required":true,"type":"string"},{"name":"tag","in":"query","required":false,"type":"string"}],"responses":{"200":{"description":"OK","schema":{"$ref":"#/definitions/packagepackageNamemanifest_GET_response"}},"401":{"description":"Access Denied"}}}},"/package/{packageName}/manifest/{tag}":{"get":{"description":"Fetches the package manifest file from the remote git repository","operationId":"packagepackageNamemanifesttag_GET_27","parameters":[{"name":"registry","in":"query","required":false,"type":"string"},{"name":"packageName","in":"path","required":true,"type":"string"},{"name":"tag","in":"path","required":true,"type":"string"}],"responses":{"200":{"description":"OK","schema":{"$ref":"#/definitions/packagepackageNamemanifesttag_GET_response"}},"401":{"description":"Access Denied"}}}},"/package/{packageName}/readme":{"get":{"description":"Retrieves the README.md file for the given package from the git repository","operationId":"packagepackageNamereadme_GET_28","parameters":[{"name":"registry","in":"query","required":false,"type":"string"},{"name":"packageName","in":"path","required":true,"type":"string"},{"name":"tag","in":"query","required":false,"type":"string"}],"responses":{"200":{"description":"OK","schema":{"$ref":"#/definitions/packagepackageNamereadme_GET_response"}},"401":{"description":"Access Denied"}}}},"/package/{packageName}/readme/{tag}":{"get":{"description":"Retrieves the README.md file for the given package from the git repository","operationId":"packagepackageNamereadmetag_GET_29","parameters":[{"name":"registry","in":"query","required":false,"type":"string"},{"name":"packageName","in":"path","required":true,"type":"string"},{"name":"tag","in":"path","required":true,"type":"string"}],"responses":{"200":{"description":"OK","schema":{"$ref":"#/definitions/packagepackageNamereadmetag_GET_response"}},"401":{"description":"Access Denied"}}}},"/package/{packageName}/vote":{"post":{"description":"Allow user to add a positive vote for this packasge, a user can only vote up or down once. Multiple votes votes will be ignored. An up vote can be cancelled by making a down vote.","operationId":"packagepackageNamevote_POST_30","consumes":["application/x-www-form-urlencoded"],"parameters":[{"name":"registry","in":"query","required":false,"type":"string"},{"name":"packageName","in":"path","required":true,"type":"string"}],"responses":{"200":{"description":"OK","schema":{"$ref":"#/definitions/packagepackageNamevote_POST_response"}},"401":{"description":"Access Denied"}}},"delete":{"description":"Allows user to add a negative vote for this packasge, a user can only vote up or down once. Multiple down votes will be ignored. A down vote can be cancelled by making an up vote.","operationId":"packagepackageNamevote_DELETE_30","parameters":[{"name":"registry","in":"query","required":false,"type":"string"},{"name":"packageName","in":"path","required":true,"type":"string"}],"responses":{"200":{"description":"OK","schema":{"$ref":"#/definitions/packagepackageNamevote_DELETE_response"}},"401":{"description":"Access Denied"}}}},"/package/categories":{"get":{"operationId":"packagecategories_GET_31","parameters":[{"name":"registry","in":"query","required":false,"type":"string"}],"responses":{"200":{"description":"OK","schema":{"$ref":"#/definitions/packagecategories_GET_response"}},"401":{"description":"Access Denied"}}}},"/package/{packageName}/tags":{"get":{"description":"## get download properties for a package\n\nRetrieves the necessary git properties including your access token so that you can download the package source code locally.\n\nNOTE: the sourceToken is a private key that should be used to authenticate if the associated git is private. They key should be written to a local\nsecure file (i.e. readonly to the specific user) and then included in the git command as such where github_rsa is the name of the file.\n\n```\n$ git clone git@github.com:johnpcarter/wm.git --config core.sshCommand\u003d\"ssh -i github_rsa\"\n```\n\nThis method can be called anoymously, but will only return packages for public registries\n\nThe trust attribute can be used to determine if the source code for the package and version is trust worthy or not.\nUNDEFINED is returned where you have not indicated what version to dowload and hence will be based on the main branch.\nACCEPTED indicates that the version is recognised by the package manager but cannot be implicitly trusted as the code could have been modified.\nTRUSTED shows that the version is recognised and that the code has not been modified i.e. we have check the signaure against the signature recorded when originally trusting the the tag.\nTRUSTED_WITH_ISSUES indicates that although the signature matches ours, that git has issues with the signaure, in which case refer to the reason output.\n\nUNDEFINED and ACCEPTED will not available to packages in registries with a TRUST_LEVEL higher than 0 i.e. packages must either be trustworthy or not.\n \nNOTE: The above command will only give read access to the git repository and does not provide any collaboration features.\n\n## INPUT\nregistry - registry to query, uses default if not provided.\npackageName - the package to be downloaded.\ntag - (optional) branch tag to download, main branch is used if not given.\n\n## OUTPUT\nsourceUrl - the url to the git repository\nsourceUserId - your git id (required if the git repo is private)\nsourceToken - the git token that you generated to allow access to private repo\ntrust - One of TRUSTED, NOT_TRUSTED, ACCEPTED, NOT_ACCEPTED, or TRUSTED_WITH_ISSUES or UNDEFINED\nreason - (optional) describes why TRUSTD_WITH_ISSUES was returned.\n\n## ERRORS\n(1) Non existent package/tag or associated with private repository for which you don\u0027t have permission\n","operationId":"packagepackageNametags_GET_32","parameters":[{"name":"registry","in":"query","required":false,"type":"string"},{"name":"packageName","in":"path","required":true,"type":"string"}],"responses":{"200":{"description":"OK","schema":{"$ref":"#/definitions/packagepackageNametags_GET_response"}},"401":{"description":"Access Denied"}}}},"/access/token/{label}":{"post":{"description":"Exchanges short term token generated via authenticate service for a long term token that can be then used in CI/CD scripts for automation.\nLabel is required for tracking purposes, see listTokens service. User can specify an optiona numDays after which the token is revoked automatically.\nUser can then revoke tokens via the revokeToken service for tokens that never expire or expire a token before numDays has been reached.\n\nThe service also allows an admin user to request tokens on behalf of other users via the optional for attribute.","operationId":"accesstokenlabel_POST_33","consumes":["application/x-www-form-urlencoded"],"parameters":[{"name":"numDays","in":"formData","description":"Optional number of days after which returned token will be revoked automatically","required":false,"type":"string"},{"name":"label","in":"path","description":"label to easily identify token when listing/revoking later","required":true,"type":"string"},{"name":"for","in":"formData","description":"(optional) Allows client to request an access token behalf of this user. However, this is only allowed if this call is made by admin user","required":false,"type":"string"}],"responses":{"200":{"description":"OK","schema":{"$ref":"#/definitions/accesstokenlabel_POST_response_1"}},"401":{"description":"Access Denied"}}},"delete":{"description":"Revokes the token identified by the label. If the given token is used after it will be refused regardless of the whether token is valid or not.","operationId":"accesstokenlabel_DELETE_33","parameters":[{"name":"label","in":"path","description":"label of token to revoke","required":true,"type":"string"}],"responses":{"200":{"description":"OK","schema":{"$ref":"#/definitions/accesstokenlabel_DELETE_response_1"}},"401":{"description":"Access Denied"}}}},"/access/tokens":{"get":{"description":"Lists all available long term tokens that were created by the current user.","operationId":"accesstokens_GET_34","parameters":[],"responses":{"200":{"description":"OK","schema":{"$ref":"#/definitions/accesstokens_GET_response_1"}},"401":{"description":"Access Denied"}}}},"/access/session":{"get":{"description":"Returns the user information associated with the given credentials, be it a JWT token or basic authentication.\nReturns a 401 error if the token is invalid or has been revoked by the administrator.","operationId":"accesssession_GET_35","parameters":[],"responses":{"200":{"description":"OK","schema":{"$ref":"#/definitions/accesssession_GET_response_1"}},"401":{"description":"Access Denied"}}}},"/access/authenticate":{"post":{"description":"Authenticates access using credentials and return a 60 minute token that should be used for al successive API access\nvia header accessToken.","operationId":"accessauthenticate_POST_36","consumes":["application/x-www-form-urlencoded"],"parameters":[{"name":"username","in":"formData","required":true,"type":"string"},{"name":"password","in":"formData","required":true,"type":"string"}],"responses":{"200":{"description":"OK","schema":{"$ref":"#/definitions/accessauthenticate_POST_response_1"}},"401":{"description":"Access Denied"}}}}},"definitions":{"values":{"required":["label","value"],"properties":{"label":{"type":"string"},"value":{"type":"integer","format":"int32"}}},"accesstokens_GET_response_1":{"required":["tokens"],"properties":{"tokens":{"type":"array","items":{"$ref":"#/definitions/tokens"}}}},"packagepackageNameuseruser_POST_response":{"required":["success"],"properties":{"success":{"type":"boolean"}}},"accessauthenticate_POST_response_1":{"required":["accessToken","userType"],"properties":{"accessToken":{"type":"string","description":"short term access token to be used for all succesive API access"},"userType":{"type":"string"}}},"Credentials":{"required":["source","token","user"],"properties":{"source":{"type":"string"},"user":{"type":"string"},"token":{"type":"string"}}},"Package":{"required":["availableTags","category","description","isVisible","lastUpdated","owner","packageName","rating","registeredDate","registryName","searchTags","sourceHasTokenForEverybody","sourceIsPrivate","sourceUrl","totalDownloads","trustedTags"],"properties":{"packageName":{"type":"string"},"registryName":{"type":"string"},"category":{"type":"string"},"assetType":{"type":"string"},"description":{"type":"string"},"homePage":{"type":"string"},"registeredDate":{"type":"string"},"owner":{"type":"string"},"searchTags":{"type":"array","items":{"type":"string"}},"sourceUrl":{"type":"string"},"sourcePath":{"type":"string"},"sourceIsPrivate":{"type":"boolean"},"sourceHasTokenForEverybody":{"type":"boolean"},"watchers":{"type":"string"},"stargazers":{"type":"string"},"lastUpdated":{"type":"string"},"trustedTags":{"type":"array","items":{"$ref":"#/definitions/trustedTags"}},"availableTags":{"type":"array","items":{"type":"string"}},"totalDownloads":{"type":"integer","format":"int32"},"upVotes":{"type":"integer","format":"int32"},"downVotes":{"type":"integer","format":"int32"},"diffVotes":{"type":"integer","format":"int32"},"rating":{"type":"integer","format":"int32"},"isVisible":{"type":"boolean"},"users":{"type":"array","items":{"type":"string"}},"alertEmail":{"type":"string"}}},"trustedTags":{"required":["by","signature","tag","when"],"properties":{"when":{"type":"string"},"by":{"type":"string"},"tag":{"type":"string"},"signature":{"type":"string"}}},"accesstokenlabel_POST_response_1":{"properties":{"accessToken":{"type":"string","description":"long term token than can now be used for CI/CD scripts etc"}}},"packagepackageNametagtag_POST_response":{"required":["success"],"properties":{"success":{"type":"boolean"}}},"packagepackageName_GET_response":{"properties":{"sourceUrl":{"type":"string"},"sourcePath":{"type":"string"},"sourceAccessKey":{"type":"string"}}},"packagepackageNametagtag_GET_response":{"required":["committer","manifest","message","trust","verification"],"properties":{"message":{"type":"string"},"committer":{"$ref":"#/definitions/committer"},"verification":{"$ref":"#/definitions/verification"},"manifest":{"$ref":"#/definitions/manifest_1"},"trust":{"type":"string"}}},"requires":{"required":["package","version"],"properties":{"package":{"type":"string"},"version":{"type":"string"}}},"registry_POST_response":{"required":["success"],"properties":{"success":{"type":"boolean"}}},"availableTags":{"required":["tag"],"properties":{"tag":{"type":"string"},"when":{"type":"string"},"by":{"type":"string"},"trust":{"type":"string"}}},"notification_POST_response":{"required":["success"],"properties":{"success":{"type":"boolean"}}},"packagepackageNameusers_POST_response":{"required":["success"],"properties":{"success":{"type":"boolean"}}},"packagepackageNamegit_GET_response":{"required":["availableTags","description","full_name","homepage","html_url","lastUpdated","size","ssh_url"],"properties":{"watchers":{"type":"string"},"stargazers":{"type":"string"},"lastUpdated":{"type":"string"},"availableTags":{"type":"array","items":{"type":"string"}},"full_name":{"type":"string"},"description":{"type":"string"},"html_url":{"type":"string"},"ssh_url":{"type":"string"},"homepage":{"type":"string"},"size":{"type":"integer","format":"int64"}}},"accesssession_GET_response_1":{"required":["internalUserID","isAdministrator","userID"],"properties":{"userID":{"type":"string"},"internalUserID":{"type":"string"},"isAdministrator":{"type":"boolean"}}},"notificationemail_GET_response":{"required":["email"],"properties":{"email":{"type":"string"}}},"packagesfilter_GET_response":{"required":["packages"],"properties":{"packages":{"type":"array","items":{"$ref":"#/definitions/Package"}}}},"notificationemail_DELETE_response":{"required":["success"],"properties":{"success":{"type":"boolean"}}},"packagepackageNamemanifest_GET_response":{"properties":{"displayName":{"type":"string"},"isSystemPackage":{"type":"string"},"version":{"type":"string"},"build":{"type":"string"},"description":{"type":"string"},"sourceWmVersion":{"type":"string"},"targetWmVersion":{"type":"string"},"lastUpdated":{"type":"string"},"packageArchiveType":{"type":"string"},"packagePublisher":{"type":"string"},"requires":{"type":"array","items":{"$ref":"#/definitions/requires_2"}}}},"accesstokenlabel_DELETE_response_1":{"properties":{"success":{"type":"boolean"}}},"Notification":{"required":["email","isPackage","name"],"properties":{"registry":{"type":"string"},"name":{"type":"string"},"isPackage":{"type":"boolean"},"friendlyName":{"type":"string"},"email":{"type":"string"}}},"trustedTags_1":{"required":["tag","when"],"properties":{"tag":{"type":"string"},"when":{"type":"string"},"by":{"type":"string"}}},"registriestype_GET_response":{"required":["registries"],"properties":{"registries":{"type":"array","items":{"$ref":"#/definitions/Registry"}}}},"registryname_PUT_response":{"required":["success"],"properties":{"success":{"type":"boolean"}}},"tokens":{"required":["createdOn","expiresOn","label"],"properties":{"label":{"type":"string"},"createdOn":{"type":"string"},"expiresOn":{"type":"string"}},"description":"List of tokens that were created by given user,  not token itself is never recorded"},"manifest":{"required":["displayName","isSystemPackage","manifestBuild","manifestDescription","manifestLastUpdated","manifestSourceWmVersion","manifestTargetWmVersion","manifestVersion","packageArchiveType","packagePublisher","requires"],"properties":{"displayName":{"type":"string"},"isSystemPackage":{"type":"string"},"manifestVersion":{"type":"string"},"manifestBuild":{"type":"string"},"manifestDescription":{"type":"string"},"manifestSourceWmVersion":{"type":"string"},"manifestTargetWmVersion":{"type":"string"},"manifestLastUpdated":{"type":"string"},"packageArchiveType":{"type":"string"},"packagePublisher":{"type":"string"},"requires":{"type":"array","items":{"$ref":"#/definitions/requires"}}}},"packagepackageNameinfo_GET_response":{"required":["category","description","isVisible","misc1","misc2","ownedByMe","owner","packageName","private","recentDownloads","registeredDate","registryName","searchTags","sourceHasTokenForEverybody","trustedTags"],"properties":{"packageName":{"type":"string"},"registryName":{"type":"string"},"description":{"type":"string"},"homePage":{"type":"string"},"category":{"type":"string"},"assetType":{"type":"string"},"owner":{"type":"string"},"ownedByMe":{"type":"boolean"},"searchTags":{"type":"array","items":{"type":"string"}},"registeredDate":{"type":"string"},"trustedTags":{"type":"array","items":{"$ref":"#/definitions/trustedTags_1"}},"isVisible":{"type":"boolean"},"sourceUrl":{"type":"string"},"sourcePath":{"type":"string"},"sourceIsPrivate":{"type":"boolean"},"sourceHasTokenForEverybody":{"type":"boolean"},"private":{"type":"boolean"},"totalDownloads":{"type":"integer","format":"int32"},"upVotes":{"type":"integer","format":"int32"},"downVotes":{"type":"integer","format":"int32"},"diffVotes":{"type":"integer","format":"int32"},"rating":{"type":"integer","format":"int32"},"misc1":{"type":"string"},"misc2":{"type":"string"},"recentDownloads":{"type":"string"},"alertEmail":{"type":"string"},"manifest":{"$ref":"#/definitions/manifest"}}},"packagepackageNameusers_GET_response":{"required":["users"],"properties":{"users":{"type":"array","items":{"type":"string"}}}},"requires_1":{"required":["package","version"],"properties":{"package":{"type":"string"},"version":{"type":"string"}}},"notificationemailemail_PUT_response":{"required":["success"],"properties":{"success":{"type":"boolean"}}},"packagepackageName_DELETE_response":{"required":["success"],"properties":{"success":{"type":"boolean"}}},"packagepackageNamemanifesttag_GET_response":{"properties":{"displayName":{"type":"string"},"isSystemPackage":{"type":"string"},"version":{"type":"string"},"build":{"type":"string"},"description":{"type":"string"},"sourceWmVersion":{"type":"string"},"targetWmVersion":{"type":"string"},"lastUpdated":{"type":"string"},"packageArchiveType":{"type":"string"},"packagePublisher":{"type":"string"},"requires":{"type":"array","items":{"$ref":"#/definitions/requires_2"}}}},"packagepackageNamereadmetag_GET_response":{"required":["readme"],"properties":{"readme":{"type":"string"}}},"packagecategories_GET_response":{"required":["categories"],"properties":{"categories":{"type":"array","items":{"type":"string"}}}},"notifications_GET_response":{"required":["notifications"],"properties":{"notifications":{"type":"array","items":{"$ref":"#/definitions/Notification"}}}},"packagepackageNamevote_DELETE_response":{"required":["success"],"properties":{"success":{"type":"boolean"},"canceledVote":{"type":"boolean"}}},"packagepackageNamehistory_GET_response":{"required":["values"],"properties":{"values":{"type":"array","items":{"$ref":"#/definitions/values"}}}},"packagepackageNametagtag_DELETE_response":{"required":["success"],"properties":{"success":{"type":"boolean"}}},"registries_GET_response":{"required":["registries"],"properties":{"registries":{"type":"array","items":{"$ref":"#/definitions/Registry"}}}},"packagepackageNametags_GET_response":{"required":["availableTags"],"properties":{"availableTags":{"type":"array","items":{"$ref":"#/definitions/availableTags"}}}},"registryname_DELETE_response":{"required":["success"],"properties":{"success":{"type":"boolean"}}},"registry_GET_response":{"required":["registry"],"properties":{"registry":{"$ref":"#/definitions/Registry"}}},"verification":{"required":["payload","reason","signature","verified"],"properties":{"verified":{"type":"boolean"},"reason":{"type":"string"},"signature":{"type":"string"},"payload":{"type":"string"}}},"package_POST_response":{"required":["success"],"properties":{"success":{"type":"boolean"}}},"credentials_POST_response":{"properties":{"success":{"type":"boolean"}}},"packagepackageNamevisibilityisVisible_PUT_response":{"properties":{"success":{"type":"boolean"}}},"registryname_GET_response":{"required":["registry"],"properties":{"registry":{"$ref":"#/definitions/Registry"}}},"packagepackageNamereadme_GET_response":{"required":["readme"],"properties":{"readme":{"type":"string"}}},"credentials_GET_response":{"required":["credentials"],"properties":{"credentials":{"type":"array","items":{"$ref":"#/definitions/Credentials"}}}},"Registry":{"required":["default","description","legal","name","owner","searchTags","trustLevel","type"],"properties":{"name":{"type":"string"},"type":{"type":"string"},"description":{"type":"string"},"legal":{"type":"string"},"searchTags":{"type":"array","items":{"type":"string"}},"owner":{"type":"string"},"trustLevel":{"type":"integer","format":"int32"},"default":{"type":"boolean"}}},"notificationname_DELETE_response":{"required":["success"],"properties":{"success":{"type":"boolean"}}},"credentialssourceuser_DELETE_response":{"required":["success"],"properties":{"success":{"type":"boolean"}}},"committer":{"required":["date","email","name"],"properties":{"name":{"type":"string"},"email":{"type":"string"},"date":{"type":"string"}}},"requires_2":{"required":["package","version"],"properties":{"package":{"type":"string"},"version":{"type":"string"}}},"manifest_1":{"required":["build","description","displayName","isSystemPackage","lastUpdated","packageArchiveType","packagePublisher","requires","sourceWmVersion","targetWmVersion","version"],"properties":{"displayName":{"type":"string"},"isSystemPackage":{"type":"string"},"version":{"type":"string"},"build":{"type":"string"},"description":{"type":"string"},"sourceWmVersion":{"type":"string"},"targetWmVersion":{"type":"string"},"lastUpdated":{"type":"string"},"packageArchiveType":{"type":"string"},"packagePublisher":{"type":"string"},"requires":{"type":"array","items":{"$ref":"#/definitions/requires_1"}}}},"packagepackageNamevote_POST_response":{"required":["success"],"properties":{"success":{"type":"boolean"},"canceledVote":{"type":"boolean"}}},"packages_GET_response":{"required":["packages"],"properties":{"packages":{"type":"array","items":{"$ref":"#/definitions/Package"}}}}},"schemes":["HTTP"]}},{"name":"artifactory:api","spec":{"swagger":"2.0","info":{"description":"List packages ast artifacts respecting the artifact API for api/storage","version":"1.0","title":"artifactory"},"host":"192.168.1.37:5555","basePath":"/rad/artifactory:api","consumes":["application/json"],"produces":["application/json"],"paths":{"/notifications":{"get":{"description":"## List available notifications for logged in user\n\nList all of the registry/package email notifications for the current user.\n\n## INPUT\nregistry - (optional) filter notifications for given registry, only applicable for package notifications.\n\n## OUTPUT\nnotifications - list of notifications\n","operationId":"notifications_GET_1","parameters":[{"name":"registry","in":"query","required":false,"type":"string"}],"responses":{"200":{"description":"OK","schema":{"$ref":"#/definitions/notifications_GET_response"}},"401":{"description":"Access Denied"}}}},"/notification":{"post":{"description":"## Add Notification\n\nAdd email notification for changes to the given package or registry.\n\n## INPUT\nregistry - registry of package if package or null if name (below) is a registry\nname - the name of the registry or package on which to receive notifications.\nisPackage - true if name is a package or false if name is a registry\nfriendlyName - name to be used in email body\nemail - email address to use for notification\n\n## OUTPUT\nsuccess - true if notification added successfully, false if registry or package don\u0027t exist or if email already registered for given asset","operationId":"notification_POST_2","consumes":["application/x-www-form-urlencoded"],"parameters":[{"name":"registry","in":"formData","required":false,"type":"string"},{"name":"name","in":"formData","required":true,"type":"string"},{"name":"isPackage","in":"formData","required":true,"type":"boolean"},{"name":"friendlyName","in":"formData","required":false,"type":"string"},{"name":"email","in":"formData","required":true,"type":"string"}],"responses":{"200":{"description":"OK","schema":{"$ref":"#/definitions/notification_POST_response"}},"401":{"description":"Access Denied"}}}},"/notification/{name}":{"delete":{"description":"## Remove registry/package notification\n\nRemoves the email notification for the given registry or package associated with the current user.\n\n## INPUT\nregistry - (optional) - only required if name is for package that is not in the default registry\nname - name of registry or package\nisPackage - true if name is a package, false if a registry\n\n## OUTPUT\nsuccess - true if notification exists and was removed, false if not","operationId":"notificationname_DELETE_3","parameters":[{"name":"registry","in":"query","required":false,"type":"string"},{"name":"name","in":"path","required":true,"type":"string"},{"name":"isPackage","in":"query","required":true,"type":"boolean"}],"responses":{"200":{"description":"OK","schema":{"$ref":"#/definitions/notificationname_DELETE_response"}},"401":{"description":"Access Denied"}}}},"/notification/email/{email}":{"put":{"description":"## Set default email for user\n\nAssociates an email address with the given user.\n\n## INPUT\nemail\n\n## OUTPUT\nsuccess - true if db updated, false if not","operationId":"notificationemailemail_PUT_4","consumes":["application/x-www-form-urlencoded"],"parameters":[{"name":"email","in":"path","required":true,"type":"string"}],"responses":{"200":{"description":"OK","schema":{"$ref":"#/definitions/notificationemailemail_PUT_response"}},"401":{"description":"Access Denied"}}}},"/notification/email":{"get":{"description":"## get default email for logged in user\n\nReturns  email address for the given user.\n\n## INPUT\nnone\n\n## OUTPUT\nemail","operationId":"notificationemail_GET_5","parameters":[],"responses":{"200":{"description":"OK","schema":{"$ref":"#/definitions/notificationemail_GET_response"}},"401":{"description":"Access Denied"}}},"delete":{"description":"## Set default email for user\n\nAssociates an email address with the given user.\n\n## INPUT\nemail\n\n## OUTPUT\nsuccess - true if db updated, false if not","operationId":"notificationemail_DELETE_5","parameters":[{"name":"email","in":"query","required":false,"type":"string"}],"responses":{"200":{"description":"OK","schema":{"$ref":"#/definitions/notificationemail_DELETE_response"}},"401":{"description":"Access Denied"}}}}},"definitions":{"notifications_GET_response":{"required":["notifications"],"properties":{"notifications":{"type":"array","items":{"$ref":"#/definitions/Notification"}}}},"notificationemailemail_PUT_response":{"required":["success"],"properties":{"success":{"type":"boolean"}}},"notificationemail_GET_response":{"required":["email"],"properties":{"email":{"type":"string"}}},"notificationemail_DELETE_response":{"required":["success"],"properties":{"success":{"type":"boolean"}}},"notification_POST_response":{"required":["success"],"properties":{"success":{"type":"boolean"}}},"Notification":{"required":["email","isPackage","name"],"properties":{"registry":{"type":"string"},"name":{"type":"string"},"isPackage":{"type":"boolean"},"friendlyName":{"type":"string"},"email":{"type":"string"}}},"notificationname_DELETE_response":{"required":["success"],"properties":{"success":{"type":"boolean"}}}},"schemes":["HTTP"]}}];
}
this.getCreatedTime = function() { 
 return "12-05-2023 11:12:57 CEST";
}
this.getPackageInfo = function(){
 return{"packageName":"WxPackageManager","displayName":"webMethods Package Manager","status":"Production","tags":["wpm","packages","containers"],"version":"1.2","buildNumber":"110","description":"Package manager for wpm cli tool. Allows developers to register\ntheir packages and share them with others. Can provide both \nanonymous registries open to all or private registries that require\nauthentication."};
}
});
